/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DevOpsVault.SDK.Core.Client;
using DevOpsVault.SDK.Core.Model;

namespace DevOpsVault.SDK.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecretsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Secret
        /// </summary>
        /// <remarks>
        /// Creates a new secret.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SecretResponse</returns>
        SecretResponse CreateSecret (string path, SecretUpsert body = default(SecretUpsert));

        /// <summary>
        /// Create a Secret
        /// </summary>
        /// <remarks>
        /// Creates a new secret.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SecretResponse</returns>
        ApiResponse<SecretResponse> CreateSecretWithHttpInfo (string path, SecretUpsert body = default(SecretUpsert));
        /// <summary>
        /// Delete a Secret
        /// </summary>
        /// <remarks>
        /// Delete a secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns></returns>
        void DeleteSecret (string path, bool? force = default(bool?), string id = default(string));

        /// <summary>
        /// Delete a Secret
        /// </summary>
        /// <remarks>
        /// Delete a secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSecretWithHttpInfo (string path, bool? force = default(bool?), string id = default(string));
        /// <summary>
        /// Get a Secret
        /// </summary>
        /// <remarks>
        /// Get a full secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>SecretResponse</returns>
        SecretResponse GetSecret (string path, string id = default(string));

        /// <summary>
        /// Get a Secret
        /// </summary>
        /// <remarks>
        /// Get a full secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>ApiResponse of SecretResponse</returns>
        ApiResponse<SecretResponse> GetSecretWithHttpInfo (string path, string id = default(string));
        /// <summary>
        /// Get a Secret By Version
        /// </summary>
        /// <remarks>
        /// Get a full secret by path and version in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>SecretVersionResponse</returns>
        SecretVersionResponse GetSecretByVersion (string path, long version);

        /// <summary>
        /// Get a Secret By Version
        /// </summary>
        /// <remarks>
        /// Get a full secret by path and version in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of SecretVersionResponse</returns>
        ApiResponse<SecretVersionResponse> GetSecretByVersionWithHttpInfo (string path, long version);
        /// <summary>
        /// Get Secret Description
        /// </summary>
        /// <remarks>
        /// Get a secret&#39;s metadata without returning the sensitive data.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>SecretDescription</returns>
        SecretDescription GetSecretDescription (string path, string id = default(string));

        /// <summary>
        /// Get Secret Description
        /// </summary>
        /// <remarks>
        /// Get a secret&#39;s metadata without returning the sensitive data.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>ApiResponse of SecretDescription</returns>
        ApiResponse<SecretDescription> GetSecretDescriptionWithHttpInfo (string path, string id = default(string));
        /// <summary>
        /// List Secret Paths
        /// </summary>
        /// <remarks>
        /// List secret paths that start with the path parameter.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The secret path to match on</param>
        /// <param name="limit">The maximum number of path matches to return (optional)</param>
        /// <returns>SecretListPathsResponse</returns>
        SecretListPathsResponse ListSecretPaths (string path, long? limit = default(long?));

        /// <summary>
        /// List Secret Paths
        /// </summary>
        /// <remarks>
        /// List secret paths that start with the path parameter.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The secret path to match on</param>
        /// <param name="limit">The maximum number of path matches to return (optional)</param>
        /// <returns>ApiResponse of SecretListPathsResponse</returns>
        ApiResponse<SecretListPathsResponse> ListSecretPathsWithHttpInfo (string path, long? limit = default(long?));
        /// <summary>
        /// Restore a Secret
        /// </summary>
        /// <remarks>
        /// Restore a secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns></returns>
        void RestoreSecret (string path, string id = default(string));

        /// <summary>
        /// Restore a Secret
        /// </summary>
        /// <remarks>
        /// Restore a secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestoreSecretWithHttpInfo (string path, string id = default(string));
        /// <summary>
        /// Rollback a Secret
        /// </summary>
        /// <remarks>
        /// Rollback a Secret to a previous version.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>SecretVersionResponse</returns>
        SecretVersionResponse RollbackSecret (string path, long version);

        /// <summary>
        /// Rollback a Secret
        /// </summary>
        /// <remarks>
        /// Rollback a Secret to a previous version.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of SecretVersionResponse</returns>
        ApiResponse<SecretVersionResponse> RollbackSecretWithHttpInfo (string path, long version);
        /// <summary>
        /// Search for Secrets
        /// </summary>
        /// <remarks>
        /// List secret paths that start with the path parameter.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Partial search term for search by path (optional)</param>
        /// <param name="filterLink">Whether to search for secrets that link to the path in the search term (optional)</param>
        /// <param name="limit">Limit for the number of results per page (cursor) (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>SecretSearch</returns>
        SecretSearch SearchSecrets (string searchTerm = default(string), bool? filterLink = default(bool?), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search for Secrets
        /// </summary>
        /// <remarks>
        /// List secret paths that start with the path parameter.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Partial search term for search by path (optional)</param>
        /// <param name="filterLink">Whether to search for secrets that link to the path in the search term (optional)</param>
        /// <param name="limit">Limit for the number of results per page (cursor) (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of SecretSearch</returns>
        ApiResponse<SecretSearch> SearchSecretsWithHttpInfo (string searchTerm = default(string), bool? filterLink = default(bool?), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update a Secret
        /// </summary>
        /// <remarks>
        /// Update an existing secret.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SecretResponse</returns>
        SecretResponse UpdateSecret (string path, SecretUpsert body = default(SecretUpsert));

        /// <summary>
        /// Update a Secret
        /// </summary>
        /// <remarks>
        /// Update an existing secret.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SecretResponse</returns>
        ApiResponse<SecretResponse> UpdateSecretWithHttpInfo (string path, SecretUpsert body = default(SecretUpsert));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecretsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Secret
        /// </summary>
        /// <remarks>
        /// Creates a new secret.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SecretResponse</returns>
        System.Threading.Tasks.Task<SecretResponse> CreateSecretAsync (string path, SecretUpsert body = default(SecretUpsert));

        /// <summary>
        /// Create a Secret
        /// </summary>
        /// <remarks>
        /// Creates a new secret.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SecretResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretResponse>> CreateSecretAsyncWithHttpInfo (string path, SecretUpsert body = default(SecretUpsert));
        /// <summary>
        /// Delete a Secret
        /// </summary>
        /// <remarks>
        /// Delete a secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSecretAsync (string path, bool? force = default(bool?), string id = default(string));

        /// <summary>
        /// Delete a Secret
        /// </summary>
        /// <remarks>
        /// Delete a secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSecretAsyncWithHttpInfo (string path, bool? force = default(bool?), string id = default(string));
        /// <summary>
        /// Get a Secret
        /// </summary>
        /// <remarks>
        /// Get a full secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of SecretResponse</returns>
        System.Threading.Tasks.Task<SecretResponse> GetSecretAsync (string path, string id = default(string));

        /// <summary>
        /// Get a Secret
        /// </summary>
        /// <remarks>
        /// Get a full secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of ApiResponse (SecretResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretResponse>> GetSecretAsyncWithHttpInfo (string path, string id = default(string));
        /// <summary>
        /// Get a Secret By Version
        /// </summary>
        /// <remarks>
        /// Get a full secret by path and version in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of SecretVersionResponse</returns>
        System.Threading.Tasks.Task<SecretVersionResponse> GetSecretByVersionAsync (string path, long version);

        /// <summary>
        /// Get a Secret By Version
        /// </summary>
        /// <remarks>
        /// Get a full secret by path and version in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (SecretVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretVersionResponse>> GetSecretByVersionAsyncWithHttpInfo (string path, long version);
        /// <summary>
        /// Get Secret Description
        /// </summary>
        /// <remarks>
        /// Get a secret&#39;s metadata without returning the sensitive data.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of SecretDescription</returns>
        System.Threading.Tasks.Task<SecretDescription> GetSecretDescriptionAsync (string path, string id = default(string));

        /// <summary>
        /// Get Secret Description
        /// </summary>
        /// <remarks>
        /// Get a secret&#39;s metadata without returning the sensitive data.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of ApiResponse (SecretDescription)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretDescription>> GetSecretDescriptionAsyncWithHttpInfo (string path, string id = default(string));
        /// <summary>
        /// List Secret Paths
        /// </summary>
        /// <remarks>
        /// List secret paths that start with the path parameter.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The secret path to match on</param>
        /// <param name="limit">The maximum number of path matches to return (optional)</param>
        /// <returns>Task of SecretListPathsResponse</returns>
        System.Threading.Tasks.Task<SecretListPathsResponse> ListSecretPathsAsync (string path, long? limit = default(long?));

        /// <summary>
        /// List Secret Paths
        /// </summary>
        /// <remarks>
        /// List secret paths that start with the path parameter.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The secret path to match on</param>
        /// <param name="limit">The maximum number of path matches to return (optional)</param>
        /// <returns>Task of ApiResponse (SecretListPathsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretListPathsResponse>> ListSecretPathsAsyncWithHttpInfo (string path, long? limit = default(long?));
        /// <summary>
        /// Restore a Secret
        /// </summary>
        /// <remarks>
        /// Restore a secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestoreSecretAsync (string path, string id = default(string));

        /// <summary>
        /// Restore a Secret
        /// </summary>
        /// <remarks>
        /// Restore a secret by path or by id in the query.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreSecretAsyncWithHttpInfo (string path, string id = default(string));
        /// <summary>
        /// Rollback a Secret
        /// </summary>
        /// <remarks>
        /// Rollback a Secret to a previous version.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of SecretVersionResponse</returns>
        System.Threading.Tasks.Task<SecretVersionResponse> RollbackSecretAsync (string path, long version);

        /// <summary>
        /// Rollback a Secret
        /// </summary>
        /// <remarks>
        /// Rollback a Secret to a previous version.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (SecretVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretVersionResponse>> RollbackSecretAsyncWithHttpInfo (string path, long version);
        /// <summary>
        /// Search for Secrets
        /// </summary>
        /// <remarks>
        /// List secret paths that start with the path parameter.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Partial search term for search by path (optional)</param>
        /// <param name="filterLink">Whether to search for secrets that link to the path in the search term (optional)</param>
        /// <param name="limit">Limit for the number of results per page (cursor) (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of SecretSearch</returns>
        System.Threading.Tasks.Task<SecretSearch> SearchSecretsAsync (string searchTerm = default(string), bool? filterLink = default(bool?), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search for Secrets
        /// </summary>
        /// <remarks>
        /// List secret paths that start with the path parameter.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Partial search term for search by path (optional)</param>
        /// <param name="filterLink">Whether to search for secrets that link to the path in the search term (optional)</param>
        /// <param name="limit">Limit for the number of results per page (cursor) (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (SecretSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretSearch>> SearchSecretsAsyncWithHttpInfo (string searchTerm = default(string), bool? filterLink = default(bool?), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update a Secret
        /// </summary>
        /// <remarks>
        /// Update an existing secret.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SecretResponse</returns>
        System.Threading.Tasks.Task<SecretResponse> UpdateSecretAsync (string path, SecretUpsert body = default(SecretUpsert));

        /// <summary>
        /// Update a Secret
        /// </summary>
        /// <remarks>
        /// Update an existing secret.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SecretResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecretResponse>> UpdateSecretAsyncWithHttpInfo (string path, SecretUpsert body = default(SecretUpsert));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecretsApi : ISecretsApiSync, ISecretsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecretsApi : ISecretsApi
    {
        private DevOpsVault.SDK.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecretsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecretsApi(String basePath)
        {
            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                new DevOpsVault.SDK.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecretsApi(DevOpsVault.SDK.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecretsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SecretsApi(DevOpsVault.SDK.Core.Client.ISynchronousClient client,DevOpsVault.SDK.Core.Client.IAsynchronousClient asyncClient, DevOpsVault.SDK.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DevOpsVault.SDK.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Secret Creates a new secret.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SecretResponse</returns>
        public SecretResponse CreateSecret (string path, SecretUpsert body = default(SecretUpsert))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretResponse> localVarResponse = CreateSecretWithHttpInfo(path, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Secret Creates a new secret.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SecretResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< SecretResponse > CreateSecretWithHttpInfo (string path, SecretUpsert body = default(SecretUpsert))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->CreateSecret");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< SecretResponse >("/secrets/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Secret Creates a new secret.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SecretResponse</returns>
        public async System.Threading.Tasks.Task<SecretResponse> CreateSecretAsync (string path, SecretUpsert body = default(SecretUpsert))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretResponse> localVarResponse = await CreateSecretAsyncWithHttpInfo(path, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Secret Creates a new secret.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SecretResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<SecretResponse>> CreateSecretAsyncWithHttpInfo (string path, SecretUpsert body = default(SecretUpsert))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->CreateSecret");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SecretResponse>("/secrets/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Secret Delete a secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns></returns>
        public void DeleteSecret (string path, bool? force = default(bool?), string id = default(string))
        {
             DeleteSecretWithHttpInfo(path, force, id);
        }

        /// <summary>
        /// Delete a Secret Delete a secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> DeleteSecretWithHttpInfo (string path, bool? force = default(bool?), string id = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteSecret");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/secrets/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Secret Delete a secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSecretAsync (string path, bool? force = default(bool?), string id = default(string))
        {
             await DeleteSecretAsyncWithHttpInfo(path, force, id);

        }

        /// <summary>
        /// Delete a Secret Delete a secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> DeleteSecretAsyncWithHttpInfo (string path, bool? force = default(bool?), string id = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->DeleteSecret");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/secrets/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Secret Get a full secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>SecretResponse</returns>
        public SecretResponse GetSecret (string path, string id = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretResponse> localVarResponse = GetSecretWithHttpInfo(path, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Secret Get a full secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>ApiResponse of SecretResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< SecretResponse > GetSecretWithHttpInfo (string path, string id = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecret");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SecretResponse >("/secrets/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Secret Get a full secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of SecretResponse</returns>
        public async System.Threading.Tasks.Task<SecretResponse> GetSecretAsync (string path, string id = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretResponse> localVarResponse = await GetSecretAsyncWithHttpInfo(path, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Secret Get a full secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of ApiResponse (SecretResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<SecretResponse>> GetSecretAsyncWithHttpInfo (string path, string id = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecret");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SecretResponse>("/secrets/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Secret By Version Get a full secret by path and version in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>SecretVersionResponse</returns>
        public SecretVersionResponse GetSecretByVersion (string path, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretVersionResponse> localVarResponse = GetSecretByVersionWithHttpInfo(path, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Secret By Version Get a full secret by path and version in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of SecretVersionResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< SecretVersionResponse > GetSecretByVersionWithHttpInfo (string path, long version)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretByVersion");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SecretVersionResponse >("/secrets/{path}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Secret By Version Get a full secret by path and version in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of SecretVersionResponse</returns>
        public async System.Threading.Tasks.Task<SecretVersionResponse> GetSecretByVersionAsync (string path, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretVersionResponse> localVarResponse = await GetSecretByVersionAsyncWithHttpInfo(path, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Secret By Version Get a full secret by path and version in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (SecretVersionResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<SecretVersionResponse>> GetSecretByVersionAsyncWithHttpInfo (string path, long version)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretByVersion");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SecretVersionResponse>("/secrets/{path}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Secret Description Get a secret&#39;s metadata without returning the sensitive data.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>SecretDescription</returns>
        public SecretDescription GetSecretDescription (string path, string id = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretDescription> localVarResponse = GetSecretDescriptionWithHttpInfo(path, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Secret Description Get a secret&#39;s metadata without returning the sensitive data.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>ApiResponse of SecretDescription</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< SecretDescription > GetSecretDescriptionWithHttpInfo (string path, string id = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretDescription");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SecretDescription >("/secrets/{path}::description", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretDescription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Secret Description Get a secret&#39;s metadata without returning the sensitive data.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of SecretDescription</returns>
        public async System.Threading.Tasks.Task<SecretDescription> GetSecretDescriptionAsync (string path, string id = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretDescription> localVarResponse = await GetSecretDescriptionAsyncWithHttpInfo(path, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Secret Description Get a secret&#39;s metadata without returning the sensitive data.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of ApiResponse (SecretDescription)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<SecretDescription>> GetSecretDescriptionAsyncWithHttpInfo (string path, string id = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->GetSecretDescription");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SecretDescription>("/secrets/{path}::description", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSecretDescription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Secret Paths List secret paths that start with the path parameter.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The secret path to match on</param>
        /// <param name="limit">The maximum number of path matches to return (optional)</param>
        /// <returns>SecretListPathsResponse</returns>
        public SecretListPathsResponse ListSecretPaths (string path, long? limit = default(long?))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretListPathsResponse> localVarResponse = ListSecretPathsWithHttpInfo(path, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Secret Paths List secret paths that start with the path parameter.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The secret path to match on</param>
        /// <param name="limit">The maximum number of path matches to return (optional)</param>
        /// <returns>ApiResponse of SecretListPathsResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< SecretListPathsResponse > ListSecretPathsWithHttpInfo (string path, long? limit = default(long?))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->ListSecretPaths");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SecretListPathsResponse >("/secrets/{path}::listpaths", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSecretPaths", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Secret Paths List secret paths that start with the path parameter.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The secret path to match on</param>
        /// <param name="limit">The maximum number of path matches to return (optional)</param>
        /// <returns>Task of SecretListPathsResponse</returns>
        public async System.Threading.Tasks.Task<SecretListPathsResponse> ListSecretPathsAsync (string path, long? limit = default(long?))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretListPathsResponse> localVarResponse = await ListSecretPathsAsyncWithHttpInfo(path, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Secret Paths List secret paths that start with the path parameter.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The secret path to match on</param>
        /// <param name="limit">The maximum number of path matches to return (optional)</param>
        /// <returns>Task of ApiResponse (SecretListPathsResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<SecretListPathsResponse>> ListSecretPathsAsyncWithHttpInfo (string path, long? limit = default(long?))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->ListSecretPaths");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SecretListPathsResponse>("/secrets/{path}::listpaths", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSecretPaths", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a Secret Restore a secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns></returns>
        public void RestoreSecret (string path, string id = default(string))
        {
             RestoreSecretWithHttpInfo(path, id);
        }

        /// <summary>
        /// Restore a Secret Restore a secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> RestoreSecretWithHttpInfo (string path, string id = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->RestoreSecret");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/secrets/{path}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a Secret Restore a secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestoreSecretAsync (string path, string id = default(string))
        {
             await RestoreSecretAsyncWithHttpInfo(path, id);

        }

        /// <summary>
        /// Restore a Secret Restore a secret by path or by id in the query.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="id">Unique uuid identifying a secret (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> RestoreSecretAsyncWithHttpInfo (string path, string id = default(string))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->RestoreSecret");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/secrets/{path}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback a Secret Rollback a Secret to a previous version.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>SecretVersionResponse</returns>
        public SecretVersionResponse RollbackSecret (string path, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretVersionResponse> localVarResponse = RollbackSecretWithHttpInfo(path, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback a Secret Rollback a Secret to a previous version.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of SecretVersionResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< SecretVersionResponse > RollbackSecretWithHttpInfo (string path, long version)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->RollbackSecret");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put< SecretVersionResponse >("/secrets/{path}/rollback/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback a Secret Rollback a Secret to a previous version.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of SecretVersionResponse</returns>
        public async System.Threading.Tasks.Task<SecretVersionResponse> RollbackSecretAsync (string path, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretVersionResponse> localVarResponse = await RollbackSecretAsyncWithHttpInfo(path, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rollback a Secret Rollback a Secret to a previous version.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (SecretVersionResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<SecretVersionResponse>> RollbackSecretAsyncWithHttpInfo (string path, long version)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->RollbackSecret");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SecretVersionResponse>("/secrets/{path}/rollback/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Secrets List secret paths that start with the path parameter.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Partial search term for search by path (optional)</param>
        /// <param name="filterLink">Whether to search for secrets that link to the path in the search term (optional)</param>
        /// <param name="limit">Limit for the number of results per page (cursor) (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>SecretSearch</returns>
        public SecretSearch SearchSecrets (string searchTerm = default(string), bool? filterLink = default(bool?), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretSearch> localVarResponse = SearchSecretsWithHttpInfo(searchTerm, filterLink, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Secrets List secret paths that start with the path parameter.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Partial search term for search by path (optional)</param>
        /// <param name="filterLink">Whether to search for secrets that link to the path in the search term (optional)</param>
        /// <param name="limit">Limit for the number of results per page (cursor) (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of SecretSearch</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< SecretSearch > SearchSecretsWithHttpInfo (string searchTerm = default(string), bool? filterLink = default(bool?), long? limit = default(long?), string cursor = default(string))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (filterLink != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "filter.link", filterLink));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SecretSearch >("/secrets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSecrets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Secrets List secret paths that start with the path parameter.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Partial search term for search by path (optional)</param>
        /// <param name="filterLink">Whether to search for secrets that link to the path in the search term (optional)</param>
        /// <param name="limit">Limit for the number of results per page (cursor) (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of SecretSearch</returns>
        public async System.Threading.Tasks.Task<SecretSearch> SearchSecretsAsync (string searchTerm = default(string), bool? filterLink = default(bool?), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretSearch> localVarResponse = await SearchSecretsAsyncWithHttpInfo(searchTerm, filterLink, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for Secrets List secret paths that start with the path parameter.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Partial search term for search by path (optional)</param>
        /// <param name="filterLink">Whether to search for secrets that link to the path in the search term (optional)</param>
        /// <param name="limit">Limit for the number of results per page (cursor) (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (SecretSearch)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<SecretSearch>> SearchSecretsAsyncWithHttpInfo (string searchTerm = default(string), bool? filterLink = default(bool?), long? limit = default(long?), string cursor = default(string))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (filterLink != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "filter.link", filterLink));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SecretSearch>("/secrets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSecrets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Secret Update an existing secret.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SecretResponse</returns>
        public SecretResponse UpdateSecret (string path, SecretUpsert body = default(SecretUpsert))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretResponse> localVarResponse = UpdateSecretWithHttpInfo(path, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Secret Update an existing secret.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SecretResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< SecretResponse > UpdateSecretWithHttpInfo (string path, SecretUpsert body = default(SecretUpsert))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->UpdateSecret");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< SecretResponse >("/secrets/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Secret Update an existing secret.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SecretResponse</returns>
        public async System.Threading.Tasks.Task<SecretResponse> UpdateSecretAsync (string path, SecretUpsert body = default(SecretUpsert))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<SecretResponse> localVarResponse = await UpdateSecretAsyncWithHttpInfo(path, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Secret Update an existing secret.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The full secret path i.e. servers/prod/webserver-01</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SecretResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<SecretResponse>> UpdateSecretAsyncWithHttpInfo (string path, SecretUpsert body = default(SecretUpsert))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling SecretsApi->UpdateSecret");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<SecretResponse>("/secrets/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
