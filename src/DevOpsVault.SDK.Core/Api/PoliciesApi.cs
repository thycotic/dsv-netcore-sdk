/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DevOpsVault.SDK.Core.Client;
using DevOpsVault.SDK.Core.Model;

namespace DevOpsVault.SDK.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Policy
        /// </summary>
        /// <remarks>
        /// Creates new policy with permission document.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse CreatePolicy (PolicyCreate body = default(PolicyCreate));

        /// <summary>
        /// Create Policy
        /// </summary>
        /// <remarks>
        /// Creates new policy with permission document.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> CreatePolicyWithHttpInfo (PolicyCreate body = default(PolicyCreate));
        /// <summary>
        /// Delete Policy
        /// </summary>
        /// <remarks>
        /// Remove an existing policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        void DeletePolicy (string path, bool? force = default(bool?));

        /// <summary>
        /// Delete Policy
        /// </summary>
        /// <remarks>
        /// Remove an existing policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePolicyWithHttpInfo (string path, bool? force = default(bool?));
        /// <summary>
        /// Get Policy
        /// </summary>
        /// <remarks>
        /// Retrieve policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse GetPolicy (string path);

        /// <summary>
        /// Get Policy
        /// </summary>
        /// <remarks>
        /// Retrieve policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> GetPolicyWithHttpInfo (string path);
        /// <summary>
        /// Get a list of policies by version
        /// </summary>
        /// <remarks>
        /// Get a full policies by path and version in the query.Returns a list of zero up to n versions of an item.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>PolicyVersionResponse</returns>
        PolicyVersionResponse GetPolicyByVersion (string path, long version);

        /// <summary>
        /// Get a list of policies by version
        /// </summary>
        /// <remarks>
        /// Get a full policies by path and version in the query.Returns a list of zero up to n versions of an item.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of PolicyVersionResponse</returns>
        ApiResponse<PolicyVersionResponse> GetPolicyByVersionWithHttpInfo (string path, long version);
        /// <summary>
        /// Restore Policy
        /// </summary>
        /// <remarks>
        /// Restore an existing policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns></returns>
        void RestorePolicy (string path);

        /// <summary>
        /// Restore Policy
        /// </summary>
        /// <remarks>
        /// Restore an existing policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestorePolicyWithHttpInfo (string path);
        /// <summary>
        /// Rollback Policy
        /// </summary>
        /// <remarks>
        /// Overwrites an existing policy with its previous version
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse RollbackPolicy (string path, long version);

        /// <summary>
        /// Rollback Policy
        /// </summary>
        /// <remarks>
        /// Overwrites an existing policy with its previous version
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> RollbackPolicyWithHttpInfo (string path, long version);
        /// <summary>
        /// Search Policies
        /// </summary>
        /// <remarks>
        /// Search permission policies by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>PolicySearchResponse</returns>
        PolicySearchResponse SearchFilter (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search Policies
        /// </summary>
        /// <remarks>
        /// Search permission policies by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of PolicySearchResponse</returns>
        ApiResponse<PolicySearchResponse> SearchFilterWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update Policy
        /// </summary>
        /// <remarks>
        /// Overwrites an existing policy with an updated permissions document
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path for policy</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse UpdatePolicy (string path, PolicyUpdate body = default(PolicyUpdate));

        /// <summary>
        /// Update Policy
        /// </summary>
        /// <remarks>
        /// Overwrites an existing policy with an updated permissions document
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path for policy</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> UpdatePolicyWithHttpInfo (string path, PolicyUpdate body = default(PolicyUpdate));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Policy
        /// </summary>
        /// <remarks>
        /// Creates new policy with permission document.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync (PolicyCreate body = default(PolicyCreate));

        /// <summary>
        /// Create Policy
        /// </summary>
        /// <remarks>
        /// Creates new policy with permission document.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreatePolicyAsyncWithHttpInfo (PolicyCreate body = default(PolicyCreate));
        /// <summary>
        /// Delete Policy
        /// </summary>
        /// <remarks>
        /// Remove an existing policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePolicyAsync (string path, bool? force = default(bool?));

        /// <summary>
        /// Delete Policy
        /// </summary>
        /// <remarks>
        /// Remove an existing policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePolicyAsyncWithHttpInfo (string path, bool? force = default(bool?));
        /// <summary>
        /// Get Policy
        /// </summary>
        /// <remarks>
        /// Retrieve policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync (string path);

        /// <summary>
        /// Get Policy
        /// </summary>
        /// <remarks>
        /// Retrieve policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> GetPolicyAsyncWithHttpInfo (string path);
        /// <summary>
        /// Get a list of policies by version
        /// </summary>
        /// <remarks>
        /// Get a full policies by path and version in the query.Returns a list of zero up to n versions of an item.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of PolicyVersionResponse</returns>
        System.Threading.Tasks.Task<PolicyVersionResponse> GetPolicyByVersionAsync (string path, long version);

        /// <summary>
        /// Get a list of policies by version
        /// </summary>
        /// <remarks>
        /// Get a full policies by path and version in the query.Returns a list of zero up to n versions of an item.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (PolicyVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyVersionResponse>> GetPolicyByVersionAsyncWithHttpInfo (string path, long version);
        /// <summary>
        /// Restore Policy
        /// </summary>
        /// <remarks>
        /// Restore an existing policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestorePolicyAsync (string path);

        /// <summary>
        /// Restore Policy
        /// </summary>
        /// <remarks>
        /// Restore an existing policy by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestorePolicyAsyncWithHttpInfo (string path);
        /// <summary>
        /// Rollback Policy
        /// </summary>
        /// <remarks>
        /// Overwrites an existing policy with its previous version
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> RollbackPolicyAsync (string path, long version);

        /// <summary>
        /// Rollback Policy
        /// </summary>
        /// <remarks>
        /// Overwrites an existing policy with its previous version
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> RollbackPolicyAsyncWithHttpInfo (string path, long version);
        /// <summary>
        /// Search Policies
        /// </summary>
        /// <remarks>
        /// Search permission policies by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of PolicySearchResponse</returns>
        System.Threading.Tasks.Task<PolicySearchResponse> SearchFilterAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search Policies
        /// </summary>
        /// <remarks>
        /// Search permission policies by path
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (PolicySearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicySearchResponse>> SearchFilterAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update Policy
        /// </summary>
        /// <remarks>
        /// Overwrites an existing policy with an updated permissions document
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path for policy</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync (string path, PolicyUpdate body = default(PolicyUpdate));

        /// <summary>
        /// Update Policy
        /// </summary>
        /// <remarks>
        /// Overwrites an existing policy with an updated permissions document
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path for policy</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> UpdatePolicyAsyncWithHttpInfo (string path, PolicyUpdate body = default(PolicyUpdate));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApi : IPoliciesApiSync, IPoliciesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PoliciesApi : IPoliciesApi
    {
        private DevOpsVault.SDK.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoliciesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoliciesApi(String basePath)
        {
            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                new DevOpsVault.SDK.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PoliciesApi(DevOpsVault.SDK.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PoliciesApi(DevOpsVault.SDK.Core.Client.ISynchronousClient client,DevOpsVault.SDK.Core.Client.IAsynchronousClient asyncClient, DevOpsVault.SDK.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DevOpsVault.SDK.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Policy Creates new policy with permission document.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse CreatePolicy (PolicyCreate body = default(PolicyCreate))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse> localVarResponse = CreatePolicyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Policy Creates new policy with permission document.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< PolicyResponse > CreatePolicyWithHttpInfo (PolicyCreate body = default(PolicyCreate))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< PolicyResponse >("/config/policies/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Policy Creates new policy with permission document.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync (PolicyCreate body = default(PolicyCreate))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse> localVarResponse = await CreatePolicyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Policy Creates new policy with permission document.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse>> CreatePolicyAsyncWithHttpInfo (PolicyCreate body = default(PolicyCreate))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PolicyResponse>("/config/policies/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Policy Remove an existing policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        public void DeletePolicy (string path, bool? force = default(bool?))
        {
             DeletePolicyWithHttpInfo(path, force);
        }

        /// <summary>
        /// Delete Policy Remove an existing policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> DeletePolicyWithHttpInfo (string path, bool? force = default(bool?))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->DeletePolicy");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/config/policies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Policy Remove an existing policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePolicyAsync (string path, bool? force = default(bool?))
        {
             await DeletePolicyAsyncWithHttpInfo(path, force);

        }

        /// <summary>
        /// Delete Policy Remove an existing policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> DeletePolicyAsyncWithHttpInfo (string path, bool? force = default(bool?))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->DeletePolicy");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/config/policies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Policy Retrieve policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse GetPolicy (string path)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse> localVarResponse = GetPolicyWithHttpInfo(path);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Policy Retrieve policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< PolicyResponse > GetPolicyWithHttpInfo (string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->GetPolicy");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PolicyResponse >("/config/policies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Policy Retrieve policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync (string path)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse> localVarResponse = await GetPolicyAsyncWithHttpInfo(path);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Policy Retrieve policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse>> GetPolicyAsyncWithHttpInfo (string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->GetPolicy");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PolicyResponse>("/config/policies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of policies by version Get a full policies by path and version in the query.Returns a list of zero up to n versions of an item.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>PolicyVersionResponse</returns>
        public PolicyVersionResponse GetPolicyByVersion (string path, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyVersionResponse> localVarResponse = GetPolicyByVersionWithHttpInfo(path, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of policies by version Get a full policies by path and version in the query.Returns a list of zero up to n versions of an item.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of PolicyVersionResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< PolicyVersionResponse > GetPolicyByVersionWithHttpInfo (string path, long version)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->GetPolicyByVersion");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PolicyVersionResponse >("/config/policies/{path}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of policies by version Get a full policies by path and version in the query.Returns a list of zero up to n versions of an item.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of PolicyVersionResponse</returns>
        public async System.Threading.Tasks.Task<PolicyVersionResponse> GetPolicyByVersionAsync (string path, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyVersionResponse> localVarResponse = await GetPolicyByVersionAsyncWithHttpInfo(path, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of policies by version Get a full policies by path and version in the query.Returns a list of zero up to n versions of an item.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (PolicyVersionResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<PolicyVersionResponse>> GetPolicyByVersionAsyncWithHttpInfo (string path, long version)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->GetPolicyByVersion");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PolicyVersionResponse>("/config/policies/{path}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore Policy Restore an existing policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns></returns>
        public void RestorePolicy (string path)
        {
             RestorePolicyWithHttpInfo(path);
        }

        /// <summary>
        /// Restore Policy Restore an existing policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> RestorePolicyWithHttpInfo (string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->RestorePolicy");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/config/policies/{path}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestorePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore Policy Restore an existing policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestorePolicyAsync (string path)
        {
             await RestorePolicyAsyncWithHttpInfo(path);

        }

        /// <summary>
        /// Restore Policy Restore an existing policy by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> RestorePolicyAsyncWithHttpInfo (string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->RestorePolicy");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/config/policies/{path}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestorePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback Policy Overwrites an existing policy with its previous version
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse RollbackPolicy (string path, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse> localVarResponse = RollbackPolicyWithHttpInfo(path, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback Policy Overwrites an existing policy with its previous version
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< PolicyResponse > RollbackPolicyWithHttpInfo (string path, long version)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->RollbackPolicy");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put< PolicyResponse >("/config/policies/{path}/rollback/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback Policy Overwrites an existing policy with its previous version
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> RollbackPolicyAsync (string path, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse> localVarResponse = await RollbackPolicyAsyncWithHttpInfo(path, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rollback Policy Overwrites an existing policy with its previous version
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path to lookup policy</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse>> RollbackPolicyAsyncWithHttpInfo (string path, long version)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->RollbackPolicy");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PolicyResponse>("/config/policies/{path}/rollback/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Policies Search permission policies by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>PolicySearchResponse</returns>
        public PolicySearchResponse SearchFilter (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicySearchResponse> localVarResponse = SearchFilterWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Policies Search permission policies by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of PolicySearchResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< PolicySearchResponse > SearchFilterWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PolicySearchResponse >("/config/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Policies Search permission policies by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of PolicySearchResponse</returns>
        public async System.Threading.Tasks.Task<PolicySearchResponse> SearchFilterAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicySearchResponse> localVarResponse = await SearchFilterAsyncWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Policies Search permission policies by path
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (PolicySearchResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<PolicySearchResponse>> SearchFilterAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PolicySearchResponse>("/config/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchFilter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Policy Overwrites an existing policy with an updated permissions document
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path for policy</param>
        /// <param name="body"> (optional)</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse UpdatePolicy (string path, PolicyUpdate body = default(PolicyUpdate))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse> localVarResponse = UpdatePolicyWithHttpInfo(path, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Policy Overwrites an existing policy with an updated permissions document
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path for policy</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< PolicyResponse > UpdatePolicyWithHttpInfo (string path, PolicyUpdate body = default(PolicyUpdate))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->UpdatePolicy");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< PolicyResponse >("/config/policies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Policy Overwrites an existing policy with an updated permissions document
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path for policy</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync (string path, PolicyUpdate body = default(PolicyUpdate))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse> localVarResponse = await UpdatePolicyAsyncWithHttpInfo(path, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Policy Overwrites an existing policy with an updated permissions document
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">Full path for policy</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<PolicyResponse>> UpdatePolicyAsyncWithHttpInfo (string path, PolicyUpdate body = default(PolicyUpdate))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'path' when calling PoliciesApi->UpdatePolicy");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (path != null)
                localVarRequestOptions.PathParameters.Add("path", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PolicyResponse>("/config/policies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
