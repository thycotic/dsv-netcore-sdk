/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DevOpsVault.SDK.Core.Client;
using DevOpsVault.SDK.Core.Model;

namespace DevOpsVault.SDK.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Role
        /// </summary>
        /// <remarks>
        /// Creates a new role.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>RoleResponse</returns>
        RoleResponse CreateRole (RoleCreate body = default(RoleCreate));

        /// <summary>
        /// Create a Role
        /// </summary>
        /// <remarks>
        /// Creates a new role.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        ApiResponse<RoleResponse> CreateRoleWithHttpInfo (RoleCreate body = default(RoleCreate));
        /// <summary>
        /// Delete a Role
        /// </summary>
        /// <remarks>
        /// Delete a role by the role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        void DeleteRole (string name, bool? force = default(bool?));

        /// <summary>
        /// Delete a Role
        /// </summary>
        /// <remarks>
        /// Delete a role by the role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoleWithHttpInfo (string name, bool? force = default(bool?));
        /// <summary>
        /// Get a Role By Version
        /// </summary>
        /// <remarks>
        /// Retrieve an existing role by role name and versions. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup role by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>RoleVersionResponse</returns>
        RoleVersionResponse GetRoleByVersion (string name, long version);

        /// <summary>
        /// Get a Role By Version
        /// </summary>
        /// <remarks>
        /// Retrieve an existing role by role name and versions. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup role by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of RoleVersionResponse</returns>
        ApiResponse<RoleVersionResponse> GetRoleByVersionWithHttpInfo (string name, long version);
        /// <summary>
        /// Restore a Role
        /// </summary>
        /// <remarks>
        /// Restore a role by path.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <returns></returns>
        void RestoreRole (string name);

        /// <summary>
        /// Restore a Role
        /// </summary>
        /// <remarks>
        /// Restore a role by path.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestoreRoleWithHttpInfo (string name);
        /// <summary>
        /// Search for Roles
        /// </summary>
        /// <remarks>
        /// Search for one or more roles by role name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of roles to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>RoleSearchResponse</returns>
        RoleSearchResponse SearchRoles (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search for Roles
        /// </summary>
        /// <remarks>
        /// Search for one or more roles by role name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of roles to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of RoleSearchResponse</returns>
        ApiResponse<RoleSearchResponse> SearchRolesWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update a Role
        /// </summary>
        /// <remarks>
        /// Update an existing role.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="role"> (optional)</param>
        /// <returns>RoleResponse</returns>
        RoleResponse UpdateRole (string name, RoleDetailsModel role = default(RoleDetailsModel));

        /// <summary>
        /// Update a Role
        /// </summary>
        /// <remarks>
        /// Update an existing role.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="role"> (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        ApiResponse<RoleResponse> UpdateRoleWithHttpInfo (string name, RoleDetailsModel role = default(RoleDetailsModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Role
        /// </summary>
        /// <remarks>
        /// Creates a new role.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> CreateRoleAsync (RoleCreate body = default(RoleCreate));

        /// <summary>
        /// Create a Role
        /// </summary>
        /// <remarks>
        /// Creates a new role.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResponse>> CreateRoleAsyncWithHttpInfo (RoleCreate body = default(RoleCreate));
        /// <summary>
        /// Delete a Role
        /// </summary>
        /// <remarks>
        /// Delete a role by the role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoleAsync (string name, bool? force = default(bool?));

        /// <summary>
        /// Delete a Role
        /// </summary>
        /// <remarks>
        /// Delete a role by the role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (string name, bool? force = default(bool?));
        /// <summary>
        /// Get a Role By Version
        /// </summary>
        /// <remarks>
        /// Retrieve an existing role by role name and versions. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup role by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of RoleVersionResponse</returns>
        System.Threading.Tasks.Task<RoleVersionResponse> GetRoleByVersionAsync (string name, long version);

        /// <summary>
        /// Get a Role By Version
        /// </summary>
        /// <remarks>
        /// Retrieve an existing role by role name and versions. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup role by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (RoleVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleVersionResponse>> GetRoleByVersionAsyncWithHttpInfo (string name, long version);
        /// <summary>
        /// Restore a Role
        /// </summary>
        /// <remarks>
        /// Restore a role by path.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestoreRoleAsync (string name);

        /// <summary>
        /// Restore a Role
        /// </summary>
        /// <remarks>
        /// Restore a role by path.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreRoleAsyncWithHttpInfo (string name);
        /// <summary>
        /// Search for Roles
        /// </summary>
        /// <remarks>
        /// Search for one or more roles by role name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of roles to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of RoleSearchResponse</returns>
        System.Threading.Tasks.Task<RoleSearchResponse> SearchRolesAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search for Roles
        /// </summary>
        /// <remarks>
        /// Search for one or more roles by role name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of roles to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (RoleSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleSearchResponse>> SearchRolesAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update a Role
        /// </summary>
        /// <remarks>
        /// Update an existing role.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="role"> (optional)</param>
        /// <returns>Task of RoleResponse</returns>
        System.Threading.Tasks.Task<RoleResponse> UpdateRoleAsync (string name, RoleDetailsModel role = default(RoleDetailsModel));

        /// <summary>
        /// Update a Role
        /// </summary>
        /// <remarks>
        /// Update an existing role.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="role"> (optional)</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResponse>> UpdateRoleAsyncWithHttpInfo (string name, RoleDetailsModel role = default(RoleDetailsModel));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IRolesApiSync, IRolesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private DevOpsVault.SDK.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(String basePath)
        {
            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                new DevOpsVault.SDK.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(DevOpsVault.SDK.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RolesApi(DevOpsVault.SDK.Core.Client.ISynchronousClient client,DevOpsVault.SDK.Core.Client.IAsynchronousClient asyncClient, DevOpsVault.SDK.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DevOpsVault.SDK.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Role Creates a new role.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse CreateRole (RoleCreate body = default(RoleCreate))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<RoleResponse> localVarResponse = CreateRoleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Role Creates a new role.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< RoleResponse > CreateRoleWithHttpInfo (RoleCreate body = default(RoleCreate))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< RoleResponse >("/roles/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Role Creates a new role.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> CreateRoleAsync (RoleCreate body = default(RoleCreate))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<RoleResponse> localVarResponse = await CreateRoleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Role Creates a new role.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<RoleResponse>> CreateRoleAsyncWithHttpInfo (RoleCreate body = default(RoleCreate))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RoleResponse>("/roles/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Role Delete a role by the role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        public void DeleteRole (string name, bool? force = default(bool?))
        {
             DeleteRoleWithHttpInfo(name, force);
        }

        /// <summary>
        /// Delete a Role Delete a role by the role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> DeleteRoleWithHttpInfo (string name, bool? force = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->DeleteRole");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Role Delete a role by the role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoleAsync (string name, bool? force = default(bool?))
        {
             await DeleteRoleAsyncWithHttpInfo(name, force);

        }

        /// <summary>
        /// Delete a Role Delete a role by the role name. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> DeleteRoleAsyncWithHttpInfo (string name, bool? force = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->DeleteRole");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Role By Version Retrieve an existing role by role name and versions. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup role by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>RoleVersionResponse</returns>
        public RoleVersionResponse GetRoleByVersion (string name, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<RoleVersionResponse> localVarResponse = GetRoleByVersionWithHttpInfo(name, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Role By Version Retrieve an existing role by role name and versions. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup role by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of RoleVersionResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< RoleVersionResponse > GetRoleByVersionWithHttpInfo (string name, long version)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->GetRoleByVersion");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RoleVersionResponse >("/roles/{name}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoleByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Role By Version Retrieve an existing role by role name and versions. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup role by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of RoleVersionResponse</returns>
        public async System.Threading.Tasks.Task<RoleVersionResponse> GetRoleByVersionAsync (string name, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<RoleVersionResponse> localVarResponse = await GetRoleByVersionAsyncWithHttpInfo(name, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Role By Version Retrieve an existing role by role name and versions. For roles linked to 3rd party providers, such as AWS or Azure, the role name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;rolename&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup role by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (RoleVersionResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<RoleVersionResponse>> GetRoleByVersionAsyncWithHttpInfo (string name, long version)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->GetRoleByVersion");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RoleVersionResponse>("/roles/{name}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoleByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a Role Restore a role by path.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <returns></returns>
        public void RestoreRole (string name)
        {
             RestoreRoleWithHttpInfo(name);
        }

        /// <summary>
        /// Restore a Role Restore a role by path.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> RestoreRoleWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->RestoreRole");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a Role Restore a role by path.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestoreRoleAsync (string name)
        {
             await RestoreRoleAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Restore a Role Restore a role by path.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> RestoreRoleAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->RestoreRole");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Roles Search for one or more roles by role name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of roles to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>RoleSearchResponse</returns>
        public RoleSearchResponse SearchRoles (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<RoleSearchResponse> localVarResponse = SearchRolesWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Roles Search for one or more roles by role name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of roles to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of RoleSearchResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< RoleSearchResponse > SearchRolesWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< RoleSearchResponse >("/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Roles Search for one or more roles by role name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of roles to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of RoleSearchResponse</returns>
        public async System.Threading.Tasks.Task<RoleSearchResponse> SearchRolesAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<RoleSearchResponse> localVarResponse = await SearchRolesAsyncWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for Roles Search for one or more roles by role name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of roles to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (RoleSearchResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<RoleSearchResponse>> SearchRolesAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RoleSearchResponse>("/roles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRoles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Role Update an existing role.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="role"> (optional)</param>
        /// <returns>RoleResponse</returns>
        public RoleResponse UpdateRole (string name, RoleDetailsModel role = default(RoleDetailsModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<RoleResponse> localVarResponse = UpdateRoleWithHttpInfo(name, role);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Role Update an existing role.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="role"> (optional)</param>
        /// <returns>ApiResponse of RoleResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< RoleResponse > UpdateRoleWithHttpInfo (string name, RoleDetailsModel role = default(RoleDetailsModel))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->UpdateRole");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = role;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< RoleResponse >("/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Role Update an existing role.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="role"> (optional)</param>
        /// <returns>Task of RoleResponse</returns>
        public async System.Threading.Tasks.Task<RoleResponse> UpdateRoleAsync (string name, RoleDetailsModel role = default(RoleDetailsModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<RoleResponse> localVarResponse = await UpdateRoleAsyncWithHttpInfo(name, role);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Role Update an existing role.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full role name to lookup role by</param>
        /// <param name="role"> (optional)</param>
        /// <returns>Task of ApiResponse (RoleResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<RoleResponse>> UpdateRoleAsyncWithHttpInfo (string name, RoleDetailsModel role = default(RoleDetailsModel))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling RolesApi->UpdateRole");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = role;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<RoleResponse>("/roles/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
