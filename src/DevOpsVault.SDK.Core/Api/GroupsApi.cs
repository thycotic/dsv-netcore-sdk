/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DevOpsVault.SDK.Core.Client;
using DevOpsVault.SDK.Core.Model;

namespace DevOpsVault.SDK.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add member in Groups
        /// </summary>
        /// <remarks>
        /// Add member in a group or groups.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddMemberResponse</returns>
        AddMemberResponse AddMember (string name, MemberRequest body = default(MemberRequest));

        /// <summary>
        /// Add member in Groups
        /// </summary>
        /// <remarks>
        /// Add member in a group or groups.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddMemberResponse</returns>
        ApiResponse<AddMemberResponse> AddMemberWithHttpInfo (string name, MemberRequest body = default(MemberRequest));
        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AddMemberResponse</returns>
        AddMemberResponse CreateGroup (Group body = default(Group));

        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddMemberResponse</returns>
        ApiResponse<AddMemberResponse> CreateGroupWithHttpInfo (Group body = default(Group));
        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete Group if it exists
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        void DeleteGroup (string name, bool? force = default(bool?));

        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete Group if it exists
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGroupWithHttpInfo (string name, bool? force = default(bool?));
        /// <summary>
        /// Delete members from Group
        /// </summary>
        /// <remarks>
        /// Delete members from Group if it exists
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void DeleteMember (string name, MemberRequest body = default(MemberRequest));

        /// <summary>
        /// Delete members from Group
        /// </summary>
        /// <remarks>
        /// Delete members from Group if it exists
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMemberWithHttpInfo (string name, MemberRequest body = default(MemberRequest));
        /// <summary>
        /// Get a Group
        /// </summary>
        /// <remarks>
        /// Retrieve an existing group by group name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>GroupResponse</returns>
        GroupResponse GetGroup (string name);

        /// <summary>
        /// Get a Group
        /// </summary>
        /// <remarks>
        /// Retrieve an existing group by group name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>ApiResponse of GroupResponse</returns>
        ApiResponse<GroupResponse> GetGroupWithHttpInfo (string name);
        /// <summary>
        /// Restore a Group
        /// </summary>
        /// <remarks>
        /// Restore a group by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns></returns>
        void RestoreGroup (string name);

        /// <summary>
        /// Restore a Group
        /// </summary>
        /// <remarks>
        /// Restore a group by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestoreGroupWithHttpInfo (string name);
        /// <summary>
        /// Search for groups
        /// </summary>
        /// <remarks>
        /// Search for one or more groups by their name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>GroupSearch</returns>
        GroupSearch SearchGroups (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search for groups
        /// </summary>
        /// <remarks>
        /// Search for one or more groups by their name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of GroupSearch</returns>
        ApiResponse<GroupSearch> SearchGroupsWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add member in Groups
        /// </summary>
        /// <remarks>
        /// Add member in a group or groups.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AddMemberResponse</returns>
        System.Threading.Tasks.Task<AddMemberResponse> AddMemberAsync (string name, MemberRequest body = default(MemberRequest));

        /// <summary>
        /// Add member in Groups
        /// </summary>
        /// <remarks>
        /// Add member in a group or groups.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AddMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddMemberResponse>> AddMemberAsyncWithHttpInfo (string name, MemberRequest body = default(MemberRequest));
        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AddMemberResponse</returns>
        System.Threading.Tasks.Task<AddMemberResponse> CreateGroupAsync (Group body = default(Group));

        /// <summary>
        /// Create a Group
        /// </summary>
        /// <remarks>
        /// Create a new group.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AddMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddMemberResponse>> CreateGroupAsyncWithHttpInfo (Group body = default(Group));
        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete Group if it exists
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteGroupAsync (string name, bool? force = default(bool?));

        /// <summary>
        /// Delete Group
        /// </summary>
        /// <remarks>
        /// Delete Group if it exists
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteGroupAsyncWithHttpInfo (string name, bool? force = default(bool?));
        /// <summary>
        /// Delete members from Group
        /// </summary>
        /// <remarks>
        /// Delete members from Group if it exists
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMemberAsync (string name, MemberRequest body = default(MemberRequest));

        /// <summary>
        /// Delete members from Group
        /// </summary>
        /// <remarks>
        /// Delete members from Group if it exists
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMemberAsyncWithHttpInfo (string name, MemberRequest body = default(MemberRequest));
        /// <summary>
        /// Get a Group
        /// </summary>
        /// <remarks>
        /// Retrieve an existing group by group name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>Task of GroupResponse</returns>
        System.Threading.Tasks.Task<GroupResponse> GetGroupAsync (string name);

        /// <summary>
        /// Get a Group
        /// </summary>
        /// <remarks>
        /// Retrieve an existing group by group name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>Task of ApiResponse (GroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupResponse>> GetGroupAsyncWithHttpInfo (string name);
        /// <summary>
        /// Restore a Group
        /// </summary>
        /// <remarks>
        /// Restore a group by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestoreGroupAsync (string name);

        /// <summary>
        /// Restore a Group
        /// </summary>
        /// <remarks>
        /// Restore a group by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreGroupAsyncWithHttpInfo (string name);
        /// <summary>
        /// Search for groups
        /// </summary>
        /// <remarks>
        /// Search for one or more groups by their name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of GroupSearch</returns>
        System.Threading.Tasks.Task<GroupSearch> SearchGroupsAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search for groups
        /// </summary>
        /// <remarks>
        /// Search for one or more groups by their name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (GroupSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSearch>> SearchGroupsAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupsApi : IGroupsApiSync, IGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupsApi : IGroupsApi
    {
        private DevOpsVault.SDK.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupsApi(String basePath)
        {
            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                new DevOpsVault.SDK.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupsApi(DevOpsVault.SDK.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupsApi(DevOpsVault.SDK.Core.Client.ISynchronousClient client,DevOpsVault.SDK.Core.Client.IAsynchronousClient asyncClient, DevOpsVault.SDK.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DevOpsVault.SDK.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add member in Groups Add member in a group or groups.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddMemberResponse</returns>
        public AddMemberResponse AddMember (string name, MemberRequest body = default(MemberRequest))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AddMemberResponse> localVarResponse = AddMemberWithHttpInfo(name, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add member in Groups Add member in a group or groups.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddMemberResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< AddMemberResponse > AddMemberWithHttpInfo (string name, MemberRequest body = default(MemberRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->AddMember");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AddMemberResponse >("/groups/{name}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add member in Groups Add member in a group or groups.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AddMemberResponse</returns>
        public async System.Threading.Tasks.Task<AddMemberResponse> AddMemberAsync (string name, MemberRequest body = default(MemberRequest))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AddMemberResponse> localVarResponse = await AddMemberAsyncWithHttpInfo(name, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add member in Groups Add member in a group or groups.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AddMemberResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<AddMemberResponse>> AddMemberAsyncWithHttpInfo (string name, MemberRequest body = default(MemberRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->AddMember");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddMemberResponse>("/groups/{name}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Group Create a new group.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AddMemberResponse</returns>
        public AddMemberResponse CreateGroup (Group body = default(Group))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AddMemberResponse> localVarResponse = CreateGroupWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Group Create a new group.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddMemberResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< AddMemberResponse > CreateGroupWithHttpInfo (Group body = default(Group))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AddMemberResponse >("/groups/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Group Create a new group.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AddMemberResponse</returns>
        public async System.Threading.Tasks.Task<AddMemberResponse> CreateGroupAsync (Group body = default(Group))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AddMemberResponse> localVarResponse = await CreateGroupAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Group Create a new group.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AddMemberResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<AddMemberResponse>> CreateGroupAsyncWithHttpInfo (Group body = default(Group))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddMemberResponse>("/groups/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Delete Group if it exists
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        public void DeleteGroup (string name, bool? force = default(bool?))
        {
             DeleteGroupWithHttpInfo(name, force);
        }

        /// <summary>
        /// Delete Group Delete Group if it exists
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> DeleteGroupWithHttpInfo (string name, bool? force = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->DeleteGroup");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Delete Group if it exists
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteGroupAsync (string name, bool? force = default(bool?))
        {
             await DeleteGroupAsyncWithHttpInfo(name, force);

        }

        /// <summary>
        /// Delete Group Delete Group if it exists
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> DeleteGroupAsyncWithHttpInfo (string name, bool? force = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->DeleteGroup");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete members from Group Delete members from Group if it exists
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void DeleteMember (string name, MemberRequest body = default(MemberRequest))
        {
             DeleteMemberWithHttpInfo(name, body);
        }

        /// <summary>
        /// Delete members from Group Delete members from Group if it exists
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> DeleteMemberWithHttpInfo (string name, MemberRequest body = default(MemberRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->DeleteMember");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{name}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete members from Group Delete members from Group if it exists
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMemberAsync (string name, MemberRequest body = default(MemberRequest))
        {
             await DeleteMemberAsyncWithHttpInfo(name, body);

        }

        /// <summary>
        /// Delete members from Group Delete members from Group if it exists
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> DeleteMemberAsyncWithHttpInfo (string name, MemberRequest body = default(MemberRequest))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->DeleteMember");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{name}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Group Retrieve an existing group by group name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>GroupResponse</returns>
        public GroupResponse GetGroup (string name)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<GroupResponse> localVarResponse = GetGroupWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Group Retrieve an existing group by group name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>ApiResponse of GroupResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< GroupResponse > GetGroupWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->GetGroup");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< GroupResponse >("/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Group Retrieve an existing group by group name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>Task of GroupResponse</returns>
        public async System.Threading.Tasks.Task<GroupResponse> GetGroupAsync (string name)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<GroupResponse> localVarResponse = await GetGroupAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Group Retrieve an existing group by group name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>Task of ApiResponse (GroupResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<GroupResponse>> GetGroupAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->GetGroup");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupResponse>("/groups/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a Group Restore a group by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns></returns>
        public void RestoreGroup (string name)
        {
             RestoreGroupWithHttpInfo(name);
        }

        /// <summary>
        /// Restore a Group Restore a group by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> RestoreGroupWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->RestoreGroup");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/groups/{name}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a Group Restore a group by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestoreGroupAsync (string name)
        {
             await RestoreGroupAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Restore a Group Restore a group by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Group name to lookup group</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> RestoreGroupAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling GroupsApi->RestoreGroup");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/groups/{name}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for groups Search for one or more groups by their name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>GroupSearch</returns>
        public GroupSearch SearchGroups (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<GroupSearch> localVarResponse = SearchGroupsWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for groups Search for one or more groups by their name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of GroupSearch</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< GroupSearch > SearchGroupsWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< GroupSearch >("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for groups Search for one or more groups by their name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of GroupSearch</returns>
        public async System.Threading.Tasks.Task<GroupSearch> SearchGroupsAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<GroupSearch> localVarResponse = await SearchGroupsAsyncWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for groups Search for one or more groups by their name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search term (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (GroupSearch)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<GroupSearch>> SearchGroupsAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupSearch>("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
