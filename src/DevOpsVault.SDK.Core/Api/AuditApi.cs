/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DevOpsVault.SDK.Core.Client;
using DevOpsVault.SDK.Core.Model;

namespace DevOpsVault.SDK.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download Audit Records
        /// </summary>
        /// <remarks>
        /// Download a zip of audit records for a time range
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date to find audits from</param>
        /// <param name="endDate">The end date to find audits to</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadAudit (string startDate, string endDate);

        /// <summary>
        /// Download Audit Records
        /// </summary>
        /// <remarks>
        /// Download a zip of audit records for a time range
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date to find audits from</param>
        /// <param name="endDate">The end date to find audits to</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadAuditWithHttpInfo (string startDate, string endDate);
        /// <summary>
        /// Find Audit Records
        /// </summary>
        /// <remarks>
        /// Find audit records based on search critera.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principal">Security principal name (optional)</param>
        /// <param name="startDate">The start date to find audits from (optional)</param>
        /// <param name="endDate">The end date to find audits to (optional)</param>
        /// <param name="action">The audit action (optional)</param>
        /// <param name="path">The secret path (optional)</param>
        /// <param name="cursor">The cursor for pagination (optional)</param>
        /// <param name="limit">The number of results to return (optional)</param>
        /// <returns>LogSearchResponse</returns>
        LogSearchResponse FindAudit (string principal = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string action = default(string), string path = default(string), string cursor = default(string), long? limit = default(long?));

        /// <summary>
        /// Find Audit Records
        /// </summary>
        /// <remarks>
        /// Find audit records based on search critera.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principal">Security principal name (optional)</param>
        /// <param name="startDate">The start date to find audits from (optional)</param>
        /// <param name="endDate">The end date to find audits to (optional)</param>
        /// <param name="action">The audit action (optional)</param>
        /// <param name="path">The secret path (optional)</param>
        /// <param name="cursor">The cursor for pagination (optional)</param>
        /// <param name="limit">The number of results to return (optional)</param>
        /// <returns>ApiResponse of LogSearchResponse</returns>
        ApiResponse<LogSearchResponse> FindAuditWithHttpInfo (string principal = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string action = default(string), string path = default(string), string cursor = default(string), long? limit = default(long?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Download Audit Records
        /// </summary>
        /// <remarks>
        /// Download a zip of audit records for a time range
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date to find audits from</param>
        /// <param name="endDate">The end date to find audits to</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadAuditAsync (string startDate, string endDate);

        /// <summary>
        /// Download Audit Records
        /// </summary>
        /// <remarks>
        /// Download a zip of audit records for a time range
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date to find audits from</param>
        /// <param name="endDate">The end date to find audits to</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadAuditAsyncWithHttpInfo (string startDate, string endDate);
        /// <summary>
        /// Find Audit Records
        /// </summary>
        /// <remarks>
        /// Find audit records based on search critera.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principal">Security principal name (optional)</param>
        /// <param name="startDate">The start date to find audits from (optional)</param>
        /// <param name="endDate">The end date to find audits to (optional)</param>
        /// <param name="action">The audit action (optional)</param>
        /// <param name="path">The secret path (optional)</param>
        /// <param name="cursor">The cursor for pagination (optional)</param>
        /// <param name="limit">The number of results to return (optional)</param>
        /// <returns>Task of LogSearchResponse</returns>
        System.Threading.Tasks.Task<LogSearchResponse> FindAuditAsync (string principal = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string action = default(string), string path = default(string), string cursor = default(string), long? limit = default(long?));

        /// <summary>
        /// Find Audit Records
        /// </summary>
        /// <remarks>
        /// Find audit records based on search critera.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principal">Security principal name (optional)</param>
        /// <param name="startDate">The start date to find audits from (optional)</param>
        /// <param name="endDate">The end date to find audits to (optional)</param>
        /// <param name="action">The audit action (optional)</param>
        /// <param name="path">The secret path (optional)</param>
        /// <param name="cursor">The cursor for pagination (optional)</param>
        /// <param name="limit">The number of results to return (optional)</param>
        /// <returns>Task of ApiResponse (LogSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogSearchResponse>> FindAuditAsyncWithHttpInfo (string principal = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string action = default(string), string path = default(string), string cursor = default(string), long? limit = default(long?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditApi : IAuditApiSync, IAuditApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditApi : IAuditApi
    {
        private DevOpsVault.SDK.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditApi(String basePath)
        {
            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                new DevOpsVault.SDK.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditApi(DevOpsVault.SDK.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuditApi(DevOpsVault.SDK.Core.Client.ISynchronousClient client,DevOpsVault.SDK.Core.Client.IAsynchronousClient asyncClient, DevOpsVault.SDK.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DevOpsVault.SDK.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Download Audit Records Download a zip of audit records for a time range
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date to find audits from</param>
        /// <param name="endDate">The end date to find audits to</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadAudit (string startDate, string endDate)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadAuditWithHttpInfo(startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download Audit Records Download a zip of audit records for a time range
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date to find audits from</param>
        /// <param name="endDate">The end date to find audits to</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< System.IO.Stream > DownloadAuditWithHttpInfo (string startDate, string endDate)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'startDate' when calling AuditApi->DownloadAudit");

            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'endDate' when calling AuditApi->DownloadAudit");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/zip"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< System.IO.Stream >("/download/audit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAudit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Audit Records Download a zip of audit records for a time range
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date to find audits from</param>
        /// <param name="endDate">The end date to find audits to</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadAuditAsync (string startDate, string endDate)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadAuditAsyncWithHttpInfo(startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download Audit Records Download a zip of audit records for a time range
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">The start date to find audits from</param>
        /// <param name="endDate">The end date to find audits to</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<System.IO.Stream>> DownloadAuditAsyncWithHttpInfo (string startDate, string endDate)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'startDate' when calling AuditApi->DownloadAudit");

            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'endDate' when calling AuditApi->DownloadAudit");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/zip"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/download/audit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAudit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Audit Records Find audit records based on search critera.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principal">Security principal name (optional)</param>
        /// <param name="startDate">The start date to find audits from (optional)</param>
        /// <param name="endDate">The end date to find audits to (optional)</param>
        /// <param name="action">The audit action (optional)</param>
        /// <param name="path">The secret path (optional)</param>
        /// <param name="cursor">The cursor for pagination (optional)</param>
        /// <param name="limit">The number of results to return (optional)</param>
        /// <returns>LogSearchResponse</returns>
        public LogSearchResponse FindAudit (string principal = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string action = default(string), string path = default(string), string cursor = default(string), long? limit = default(long?))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<LogSearchResponse> localVarResponse = FindAuditWithHttpInfo(principal, startDate, endDate, action, path, cursor, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Audit Records Find audit records based on search critera.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principal">Security principal name (optional)</param>
        /// <param name="startDate">The start date to find audits from (optional)</param>
        /// <param name="endDate">The end date to find audits to (optional)</param>
        /// <param name="action">The audit action (optional)</param>
        /// <param name="path">The secret path (optional)</param>
        /// <param name="cursor">The cursor for pagination (optional)</param>
        /// <param name="limit">The number of results to return (optional)</param>
        /// <returns>ApiResponse of LogSearchResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< LogSearchResponse > FindAuditWithHttpInfo (string principal = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string action = default(string), string path = default(string), string cursor = default(string), long? limit = default(long?))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (principal != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "principal", principal));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< LogSearchResponse >("/audit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAudit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Audit Records Find audit records based on search critera.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principal">Security principal name (optional)</param>
        /// <param name="startDate">The start date to find audits from (optional)</param>
        /// <param name="endDate">The end date to find audits to (optional)</param>
        /// <param name="action">The audit action (optional)</param>
        /// <param name="path">The secret path (optional)</param>
        /// <param name="cursor">The cursor for pagination (optional)</param>
        /// <param name="limit">The number of results to return (optional)</param>
        /// <returns>Task of LogSearchResponse</returns>
        public async System.Threading.Tasks.Task<LogSearchResponse> FindAuditAsync (string principal = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string action = default(string), string path = default(string), string cursor = default(string), long? limit = default(long?))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<LogSearchResponse> localVarResponse = await FindAuditAsyncWithHttpInfo(principal, startDate, endDate, action, path, cursor, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Audit Records Find audit records based on search critera.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="principal">Security principal name (optional)</param>
        /// <param name="startDate">The start date to find audits from (optional)</param>
        /// <param name="endDate">The end date to find audits to (optional)</param>
        /// <param name="action">The audit action (optional)</param>
        /// <param name="path">The secret path (optional)</param>
        /// <param name="cursor">The cursor for pagination (optional)</param>
        /// <param name="limit">The number of results to return (optional)</param>
        /// <returns>Task of ApiResponse (LogSearchResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<LogSearchResponse>> FindAuditAsyncWithHttpInfo (string principal = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), string action = default(string), string path = default(string), string cursor = default(string), long? limit = default(long?))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (principal != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "principal", principal));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<LogSearchResponse>("/audit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAudit", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
