/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DevOpsVault.SDK.Core.Client;
using DevOpsVault.SDK.Core.Model;

namespace DevOpsVault.SDK.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Authentication Provider
        /// </summary>
        /// <remarks>
        /// Creates new authentication provider settings.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AuthenticationSettingsResponse</returns>
        AuthenticationSettingsResponse CreateAuthSettings (AuthenticationSettingsCreateModel body = default(AuthenticationSettingsCreateModel));

        /// <summary>
        /// Create Authentication Provider
        /// </summary>
        /// <remarks>
        /// Creates new authentication provider settings.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AuthenticationSettingsResponse</returns>
        ApiResponse<AuthenticationSettingsResponse> CreateAuthSettingsWithHttpInfo (AuthenticationSettingsCreateModel body = default(AuthenticationSettingsCreateModel));
        /// <summary>
        /// Delete Authentication Provider
        /// </summary>
        /// <remarks>
        /// Remove authentication provider settings from the system.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        void DeleteAuthSettings (string name, bool? force = default(bool?));

        /// <summary>
        /// Delete Authentication Provider
        /// </summary>
        /// <remarks>
        /// Remove authentication provider settings from the system.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAuthSettingsWithHttpInfo (string name, bool? force = default(bool?));
        /// <summary>
        /// Get Authentication Provider
        /// </summary>
        /// <remarks>
        /// Retrieve authentication providers by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>AuthenticationSettingsResponse</returns>
        AuthenticationSettingsResponse GetAuthSettings (string name);

        /// <summary>
        /// Get Authentication Provider
        /// </summary>
        /// <remarks>
        /// Retrieve authentication providers by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>ApiResponse of AuthenticationSettingsResponse</returns>
        ApiResponse<AuthenticationSettingsResponse> GetAuthSettingsWithHttpInfo (string name);
        /// <summary>
        /// Get a list of Authentication Settings by version
        /// </summary>
        /// <remarks>
        /// Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>AuthenticationSettingsVersionResponse</returns>
        AuthenticationSettingsVersionResponse GetAuthSettingsByVersion (string name, long version);

        /// <summary>
        /// Get a list of Authentication Settings by version
        /// </summary>
        /// <remarks>
        /// Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of AuthenticationSettingsVersionResponse</returns>
        ApiResponse<AuthenticationSettingsVersionResponse> GetAuthSettingsByVersionWithHttpInfo (string name, long version);
        /// <summary>
        /// Restore Authentication Provider
        /// </summary>
        /// <remarks>
        /// Restore authentication provider settings if it had been marked for deletion.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns></returns>
        void RestoreAuthSettings (string name);

        /// <summary>
        /// Restore Authentication Provider
        /// </summary>
        /// <remarks>
        /// Restore authentication provider settings if it had been marked for deletion.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestoreAuthSettingsWithHttpInfo (string name);
        /// <summary>
        /// Rollback Authentication Provider
        /// </summary>
        /// <remarks>
        /// Rollback authentication provider to a previous version.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns></returns>
        void RollbackAuthSettings (string name, long version);

        /// <summary>
        /// Rollback Authentication Provider
        /// </summary>
        /// <remarks>
        /// Rollback authentication provider to a previous version.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RollbackAuthSettingsWithHttpInfo (string name, long version);
        /// <summary>
        /// Search Authentication Providers
        /// </summary>
        /// <remarks>
        /// Search authentication providers by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for setting name (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>AuthenticationSettingsSearchResponse</returns>
        AuthenticationSettingsSearchResponse SearchSettings (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search Authentication Providers
        /// </summary>
        /// <remarks>
        /// Search authentication providers by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for setting name (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of AuthenticationSettingsSearchResponse</returns>
        ApiResponse<AuthenticationSettingsSearchResponse> SearchSettingsWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update Authentication Provider
        /// </summary>
        /// <remarks>
        /// Updates all fields on an existing authentication provider.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AuthenticationSettingsResponse</returns>
        AuthenticationSettingsResponse UpdateAuthSettings (string name, AuthenticationDetailsModel body = default(AuthenticationDetailsModel));

        /// <summary>
        /// Update Authentication Provider
        /// </summary>
        /// <remarks>
        /// Updates all fields on an existing authentication provider.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AuthenticationSettingsResponse</returns>
        ApiResponse<AuthenticationSettingsResponse> UpdateAuthSettingsWithHttpInfo (string name, AuthenticationDetailsModel body = default(AuthenticationDetailsModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Authentication Provider
        /// </summary>
        /// <remarks>
        /// Creates new authentication provider settings.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AuthenticationSettingsResponse</returns>
        System.Threading.Tasks.Task<AuthenticationSettingsResponse> CreateAuthSettingsAsync (AuthenticationSettingsCreateModel body = default(AuthenticationSettingsCreateModel));

        /// <summary>
        /// Create Authentication Provider
        /// </summary>
        /// <remarks>
        /// Creates new authentication provider settings.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationSettingsResponse>> CreateAuthSettingsAsyncWithHttpInfo (AuthenticationSettingsCreateModel body = default(AuthenticationSettingsCreateModel));
        /// <summary>
        /// Delete Authentication Provider
        /// </summary>
        /// <remarks>
        /// Remove authentication provider settings from the system.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAuthSettingsAsync (string name, bool? force = default(bool?));

        /// <summary>
        /// Delete Authentication Provider
        /// </summary>
        /// <remarks>
        /// Remove authentication provider settings from the system.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAuthSettingsAsyncWithHttpInfo (string name, bool? force = default(bool?));
        /// <summary>
        /// Get Authentication Provider
        /// </summary>
        /// <remarks>
        /// Retrieve authentication providers by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>Task of AuthenticationSettingsResponse</returns>
        System.Threading.Tasks.Task<AuthenticationSettingsResponse> GetAuthSettingsAsync (string name);

        /// <summary>
        /// Get Authentication Provider
        /// </summary>
        /// <remarks>
        /// Retrieve authentication providers by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationSettingsResponse>> GetAuthSettingsAsyncWithHttpInfo (string name);
        /// <summary>
        /// Get a list of Authentication Settings by version
        /// </summary>
        /// <remarks>
        /// Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of AuthenticationSettingsVersionResponse</returns>
        System.Threading.Tasks.Task<AuthenticationSettingsVersionResponse> GetAuthSettingsByVersionAsync (string name, long version);

        /// <summary>
        /// Get a list of Authentication Settings by version
        /// </summary>
        /// <remarks>
        /// Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationSettingsVersionResponse>> GetAuthSettingsByVersionAsyncWithHttpInfo (string name, long version);
        /// <summary>
        /// Restore Authentication Provider
        /// </summary>
        /// <remarks>
        /// Restore authentication provider settings if it had been marked for deletion.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestoreAuthSettingsAsync (string name);

        /// <summary>
        /// Restore Authentication Provider
        /// </summary>
        /// <remarks>
        /// Restore authentication provider settings if it had been marked for deletion.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreAuthSettingsAsyncWithHttpInfo (string name);
        /// <summary>
        /// Rollback Authentication Provider
        /// </summary>
        /// <remarks>
        /// Rollback authentication provider to a previous version.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RollbackAuthSettingsAsync (string name, long version);

        /// <summary>
        /// Rollback Authentication Provider
        /// </summary>
        /// <remarks>
        /// Rollback authentication provider to a previous version.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RollbackAuthSettingsAsyncWithHttpInfo (string name, long version);
        /// <summary>
        /// Search Authentication Providers
        /// </summary>
        /// <remarks>
        /// Search authentication providers by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for setting name (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of AuthenticationSettingsSearchResponse</returns>
        System.Threading.Tasks.Task<AuthenticationSettingsSearchResponse> SearchSettingsAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search Authentication Providers
        /// </summary>
        /// <remarks>
        /// Search authentication providers by name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for setting name (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationSettingsSearchResponse>> SearchSettingsAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update Authentication Provider
        /// </summary>
        /// <remarks>
        /// Updates all fields on an existing authentication provider.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AuthenticationSettingsResponse</returns>
        System.Threading.Tasks.Task<AuthenticationSettingsResponse> UpdateAuthSettingsAsync (string name, AuthenticationDetailsModel body = default(AuthenticationDetailsModel));

        /// <summary>
        /// Update Authentication Provider
        /// </summary>
        /// <remarks>
        /// Updates all fields on an existing authentication provider.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationSettingsResponse>> UpdateAuthSettingsAsyncWithHttpInfo (string name, AuthenticationDetailsModel body = default(AuthenticationDetailsModel));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : ISettingsApi
    {
        private DevOpsVault.SDK.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsApi(String basePath)
        {
            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                new DevOpsVault.SDK.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsApi(DevOpsVault.SDK.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SettingsApi(DevOpsVault.SDK.Core.Client.ISynchronousClient client,DevOpsVault.SDK.Core.Client.IAsynchronousClient asyncClient, DevOpsVault.SDK.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DevOpsVault.SDK.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Authentication Provider Creates new authentication provider settings.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AuthenticationSettingsResponse</returns>
        public AuthenticationSettingsResponse CreateAuthSettings (AuthenticationSettingsCreateModel body = default(AuthenticationSettingsCreateModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsResponse> localVarResponse = CreateAuthSettingsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Authentication Provider Creates new authentication provider settings.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AuthenticationSettingsResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< AuthenticationSettingsResponse > CreateAuthSettingsWithHttpInfo (AuthenticationSettingsCreateModel body = default(AuthenticationSettingsCreateModel))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AuthenticationSettingsResponse >("/config/auth/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Authentication Provider Creates new authentication provider settings.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AuthenticationSettingsResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationSettingsResponse> CreateAuthSettingsAsync (AuthenticationSettingsCreateModel body = default(AuthenticationSettingsCreateModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsResponse> localVarResponse = await CreateAuthSettingsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Authentication Provider Creates new authentication provider settings.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsResponse>> CreateAuthSettingsAsyncWithHttpInfo (AuthenticationSettingsCreateModel body = default(AuthenticationSettingsCreateModel))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthenticationSettingsResponse>("/config/auth/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Authentication Provider Remove authentication provider settings from the system.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        public void DeleteAuthSettings (string name, bool? force = default(bool?))
        {
             DeleteAuthSettingsWithHttpInfo(name, force);
        }

        /// <summary>
        /// Delete Authentication Provider Remove authentication provider settings from the system.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> DeleteAuthSettingsWithHttpInfo (string name, bool? force = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->DeleteAuthSettings");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/config/auth/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Authentication Provider Remove authentication provider settings from the system.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAuthSettingsAsync (string name, bool? force = default(bool?))
        {
             await DeleteAuthSettingsAsyncWithHttpInfo(name, force);

        }

        /// <summary>
        /// Delete Authentication Provider Remove authentication provider settings from the system.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> DeleteAuthSettingsAsyncWithHttpInfo (string name, bool? force = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->DeleteAuthSettings");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/config/auth/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authentication Provider Retrieve authentication providers by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>AuthenticationSettingsResponse</returns>
        public AuthenticationSettingsResponse GetAuthSettings (string name)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsResponse> localVarResponse = GetAuthSettingsWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authentication Provider Retrieve authentication providers by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>ApiResponse of AuthenticationSettingsResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< AuthenticationSettingsResponse > GetAuthSettingsWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->GetAuthSettings");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AuthenticationSettingsResponse >("/config/auth/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Authentication Provider Retrieve authentication providers by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>Task of AuthenticationSettingsResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationSettingsResponse> GetAuthSettingsAsync (string name)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsResponse> localVarResponse = await GetAuthSettingsAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Authentication Provider Retrieve authentication providers by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsResponse>> GetAuthSettingsAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->GetAuthSettings");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticationSettingsResponse>("/config/auth/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of Authentication Settings by version Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>AuthenticationSettingsVersionResponse</returns>
        public AuthenticationSettingsVersionResponse GetAuthSettingsByVersion (string name, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsVersionResponse> localVarResponse = GetAuthSettingsByVersionWithHttpInfo(name, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of Authentication Settings by version Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of AuthenticationSettingsVersionResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< AuthenticationSettingsVersionResponse > GetAuthSettingsByVersionWithHttpInfo (string name, long version)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->GetAuthSettingsByVersion");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AuthenticationSettingsVersionResponse >("/config/auth/{name}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthSettingsByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of Authentication Settings by version Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of AuthenticationSettingsVersionResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationSettingsVersionResponse> GetAuthSettingsByVersionAsync (string name, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsVersionResponse> localVarResponse = await GetAuthSettingsByVersionAsyncWithHttpInfo(name, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of Authentication Settings by version Get a full Settings by name and version in the query. Returns a list of zero up to n versions of an item.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsVersionResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsVersionResponse>> GetAuthSettingsByVersionAsyncWithHttpInfo (string name, long version)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->GetAuthSettingsByVersion");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticationSettingsVersionResponse>("/config/auth/{name}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthSettingsByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore Authentication Provider Restore authentication provider settings if it had been marked for deletion.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns></returns>
        public void RestoreAuthSettings (string name)
        {
             RestoreAuthSettingsWithHttpInfo(name);
        }

        /// <summary>
        /// Restore Authentication Provider Restore authentication provider settings if it had been marked for deletion.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> RestoreAuthSettingsWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->RestoreAuthSettings");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/config/auth/{name}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore Authentication Provider Restore authentication provider settings if it had been marked for deletion.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestoreAuthSettingsAsync (string name)
        {
             await RestoreAuthSettingsAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Restore Authentication Provider Restore authentication provider settings if it had been marked for deletion.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> RestoreAuthSettingsAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->RestoreAuthSettings");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/config/auth/{name}/restore", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback Authentication Provider Rollback authentication provider to a previous version.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns></returns>
        public void RollbackAuthSettings (string name, long version)
        {
             RollbackAuthSettingsWithHttpInfo(name, version);
        }

        /// <summary>
        /// Rollback Authentication Provider Rollback authentication provider to a previous version.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> RollbackAuthSettingsWithHttpInfo (string name, long version)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->RollbackAuthSettings");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/config/auth/{name}/rollback/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback Authentication Provider Rollback authentication provider to a previous version.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RollbackAuthSettingsAsync (string name, long version)
        {
             await RollbackAuthSettingsAsyncWithHttpInfo(name, version);

        }

        /// <summary>
        /// Rollback Authentication Provider Rollback authentication provider to a previous version.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> RollbackAuthSettingsAsyncWithHttpInfo (string name, long version)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->RollbackAuthSettings");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/config/auth/{name}/rollback/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Authentication Providers Search authentication providers by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for setting name (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>AuthenticationSettingsSearchResponse</returns>
        public AuthenticationSettingsSearchResponse SearchSettings (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsSearchResponse> localVarResponse = SearchSettingsWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Authentication Providers Search authentication providers by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for setting name (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of AuthenticationSettingsSearchResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< AuthenticationSettingsSearchResponse > SearchSettingsWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AuthenticationSettingsSearchResponse >("/config/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Authentication Providers Search authentication providers by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for setting name (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of AuthenticationSettingsSearchResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationSettingsSearchResponse> SearchSettingsAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsSearchResponse> localVarResponse = await SearchSettingsAsyncWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Authentication Providers Search authentication providers by name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for setting name (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsSearchResponse>> SearchSettingsAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthenticationSettingsSearchResponse>("/config/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Authentication Provider Updates all fields on an existing authentication provider.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AuthenticationSettingsResponse</returns>
        public AuthenticationSettingsResponse UpdateAuthSettings (string name, AuthenticationDetailsModel body = default(AuthenticationDetailsModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsResponse> localVarResponse = UpdateAuthSettingsWithHttpInfo(name, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Authentication Provider Updates all fields on an existing authentication provider.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AuthenticationSettingsResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< AuthenticationSettingsResponse > UpdateAuthSettingsWithHttpInfo (string name, AuthenticationDetailsModel body = default(AuthenticationDetailsModel))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->UpdateAuthSettings");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< AuthenticationSettingsResponse >("/config/auth/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Authentication Provider Updates all fields on an existing authentication provider.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AuthenticationSettingsResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationSettingsResponse> UpdateAuthSettingsAsync (string name, AuthenticationDetailsModel body = default(AuthenticationDetailsModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsResponse> localVarResponse = await UpdateAuthSettingsAsyncWithHttpInfo(name, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Authentication Provider Updates all fields on an existing authentication provider.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to lookup authentication settings by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AuthenticationSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<AuthenticationSettingsResponse>> UpdateAuthSettingsAsyncWithHttpInfo (string name, AuthenticationDetailsModel body = default(AuthenticationDetailsModel))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling SettingsApi->UpdateAuthSettings");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthenticationSettingsResponse>("/config/auth/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAuthSettings", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
