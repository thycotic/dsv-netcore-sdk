/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using DevOpsVault.SDK.Core.Client;
using DevOpsVault.SDK.Core.Model;

namespace DevOpsVault.SDK.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Change Password
        /// </summary>
        /// <remarks>
        /// Allows the user to change their own password.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ChangePassword (string name, PasswordChangeModel body = default(PasswordChangeModel));

        /// <summary>
        /// Change Password
        /// </summary>
        /// <remarks>
        /// Allows the user to change their own password.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangePasswordWithHttpInfo (string name, PasswordChangeModel body = default(PasswordChangeModel));
        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>UserResponse</returns>
        UserResponse CreateUser (UserCreateModel body = default(UserCreateModel));

        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        ApiResponse<UserResponse> CreateUserWithHttpInfo (UserCreateModel body = default(UserCreateModel));
        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        void DeleteUser (string name, bool? force = default(bool?));

        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (string name, bool? force = default(bool?));
        /// <summary>
        /// Get a member Group
        /// </summary>
        /// <remarks>
        /// Retrieve a member&#39;s group by member name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Member name to lookup member</param>
        /// <returns>MemberResponse</returns>
        MemberResponse GetMember (string name);

        /// <summary>
        /// Get a member Group
        /// </summary>
        /// <remarks>
        /// Retrieve a member&#39;s group by member name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Member name to lookup member</param>
        /// <returns>ApiResponse of MemberResponse</returns>
        ApiResponse<MemberResponse> GetMemberWithHttpInfo (string name);
        /// <summary>
        /// Get a User By Version
        /// </summary>
        /// <remarks>
        /// Retrieve an existing user by user name and version. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>UserVersionResponse</returns>
        UserVersionResponse GetUserByVersion (string name, long version);

        /// <summary>
        /// Get a User By Version
        /// </summary>
        /// <remarks>
        /// Retrieve an existing user by user name and version. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of UserVersionResponse</returns>
        ApiResponse<UserVersionResponse> GetUserByVersionWithHttpInfo (string name, long version);
        /// <summary>
        /// Restore a User
        /// </summary>
        /// <remarks>
        /// Restore a user by path.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <returns></returns>
        void RestoreUser (string name);

        /// <summary>
        /// Restore a User
        /// </summary>
        /// <remarks>
        /// Restore a user by path.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RestoreUserWithHttpInfo (string name);
        /// <summary>
        /// Search for Users
        /// </summary>
        /// <remarks>
        /// Search for one or more users by their name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of users to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>UserSearch</returns>
        UserSearch SearchUsers (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search for Users
        /// </summary>
        /// <remarks>
        /// Search for one or more users by their name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of users to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of UserSearch</returns>
        ApiResponse<UserSearch> SearchUsersWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// Update an existing user.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserResponse</returns>
        UserResponse UpdateUser (string name, UserUpdateModel body = default(UserUpdateModel));

        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// Update an existing user.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        ApiResponse<UserResponse> UpdateUserWithHttpInfo (string name, UserUpdateModel body = default(UserUpdateModel));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Change Password
        /// </summary>
        /// <remarks>
        /// Allows the user to change their own password.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangePasswordAsync (string name, PasswordChangeModel body = default(PasswordChangeModel));

        /// <summary>
        /// Change Password
        /// </summary>
        /// <remarks>
        /// Allows the user to change their own password.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangePasswordAsyncWithHttpInfo (string name, PasswordChangeModel body = default(PasswordChangeModel));
        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserResponse</returns>
        System.Threading.Tasks.Task<UserResponse> CreateUserAsync (UserCreateModel body = default(UserCreateModel));

        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Create a new user.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponse>> CreateUserAsyncWithHttpInfo (UserCreateModel body = default(UserCreateModel));
        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync (string name, bool? force = default(bool?));

        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string name, bool? force = default(bool?));
        /// <summary>
        /// Get a member Group
        /// </summary>
        /// <remarks>
        /// Retrieve a member&#39;s group by member name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Member name to lookup member</param>
        /// <returns>Task of MemberResponse</returns>
        System.Threading.Tasks.Task<MemberResponse> GetMemberAsync (string name);

        /// <summary>
        /// Get a member Group
        /// </summary>
        /// <remarks>
        /// Retrieve a member&#39;s group by member name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Member name to lookup member</param>
        /// <returns>Task of ApiResponse (MemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponse>> GetMemberAsyncWithHttpInfo (string name);
        /// <summary>
        /// Get a User By Version
        /// </summary>
        /// <remarks>
        /// Retrieve an existing user by user name and version. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of UserVersionResponse</returns>
        System.Threading.Tasks.Task<UserVersionResponse> GetUserByVersionAsync (string name, long version);

        /// <summary>
        /// Get a User By Version
        /// </summary>
        /// <remarks>
        /// Retrieve an existing user by user name and version. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (UserVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserVersionResponse>> GetUserByVersionAsyncWithHttpInfo (string name, long version);
        /// <summary>
        /// Restore a User
        /// </summary>
        /// <remarks>
        /// Restore a user by path.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RestoreUserAsync (string name);

        /// <summary>
        /// Restore a User
        /// </summary>
        /// <remarks>
        /// Restore a user by path.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RestoreUserAsyncWithHttpInfo (string name);
        /// <summary>
        /// Search for Users
        /// </summary>
        /// <remarks>
        /// Search for one or more users by their name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of users to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of UserSearch</returns>
        System.Threading.Tasks.Task<UserSearch> SearchUsersAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));

        /// <summary>
        /// Search for Users
        /// </summary>
        /// <remarks>
        /// Search for one or more users by their name.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of users to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (UserSearch)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSearch>> SearchUsersAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string));
        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// Update an existing user.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserResponse</returns>
        System.Threading.Tasks.Task<UserResponse> UpdateUserAsync (string name, UserUpdateModel body = default(UserUpdateModel));

        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// Update an existing user.
        /// </remarks>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponse>> UpdateUserAsyncWithHttpInfo (string name, UserUpdateModel body = default(UserUpdateModel));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private DevOpsVault.SDK.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                new DevOpsVault.SDK.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(DevOpsVault.SDK.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DevOpsVault.SDK.Core.Client.Configuration.MergeConfigurations(
                DevOpsVault.SDK.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new DevOpsVault.SDK.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(DevOpsVault.SDK.Core.Client.ISynchronousClient client,DevOpsVault.SDK.Core.Client.IAsynchronousClient asyncClient, DevOpsVault.SDK.Core.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DevOpsVault.SDK.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DevOpsVault.SDK.Core.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DevOpsVault.SDK.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Change Password Allows the user to change their own password.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ChangePassword (string name, PasswordChangeModel body = default(PasswordChangeModel))
        {
             ChangePasswordWithHttpInfo(name, body);
        }

        /// <summary>
        /// Change Password Allows the user to change their own password.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> ChangePasswordWithHttpInfo (string name, PasswordChangeModel body = default(PasswordChangeModel))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->ChangePassword");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/users/{name}/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Password Allows the user to change their own password.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangePasswordAsync (string name, PasswordChangeModel body = default(PasswordChangeModel))
        {
             await ChangePasswordAsyncWithHttpInfo(name, body);

        }

        /// <summary>
        /// Change Password Allows the user to change their own password.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> ChangePasswordAsyncWithHttpInfo (string name, PasswordChangeModel body = default(PasswordChangeModel))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->ChangePassword");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/users/{name}/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a User Create a new user.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>UserResponse</returns>
        public UserResponse CreateUser (UserCreateModel body = default(UserCreateModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<UserResponse> localVarResponse = CreateUserWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a User Create a new user.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< UserResponse > CreateUserWithHttpInfo (UserCreateModel body = default(UserCreateModel))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< UserResponse >("/users/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a User Create a new user.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserResponse</returns>
        public async System.Threading.Tasks.Task<UserResponse> CreateUserAsync (UserCreateModel body = default(UserCreateModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<UserResponse> localVarResponse = await CreateUserAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a User Create a new user.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<UserResponse>> CreateUserAsyncWithHttpInfo (UserCreateModel body = default(UserCreateModel))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserResponse>("/users/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a User Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns></returns>
        public void DeleteUser (string name, bool? force = default(bool?))
        {
             DeleteUserWithHttpInfo(name, force);
        }

        /// <summary>
        /// Delete a User Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> DeleteUserWithHttpInfo (string name, bool? force = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->DeleteUser");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a User Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync (string name, bool? force = default(bool?))
        {
             await DeleteUserAsyncWithHttpInfo(name, force);

        }

        /// <summary>
        /// Delete a User Retrieve an existing user by user name. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="force">Delete immediately (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> DeleteUserAsyncWithHttpInfo (string name, bool? force = default(bool?))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->DeleteUser");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a member Group Retrieve a member&#39;s group by member name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Member name to lookup member</param>
        /// <returns>MemberResponse</returns>
        public MemberResponse GetMember (string name)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<MemberResponse> localVarResponse = GetMemberWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a member Group Retrieve a member&#39;s group by member name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Member name to lookup member</param>
        /// <returns>ApiResponse of MemberResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< MemberResponse > GetMemberWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetMember");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MemberResponse >("/users/{name}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a member Group Retrieve a member&#39;s group by member name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Member name to lookup member</param>
        /// <returns>Task of MemberResponse</returns>
        public async System.Threading.Tasks.Task<MemberResponse> GetMemberAsync (string name)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<MemberResponse> localVarResponse = await GetMemberAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a member Group Retrieve a member&#39;s group by member name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Member name to lookup member</param>
        /// <returns>Task of ApiResponse (MemberResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<MemberResponse>> GetMemberAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetMember");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberResponse>("/users/{name}/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a User By Version Retrieve an existing user by user name and version. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>UserVersionResponse</returns>
        public UserVersionResponse GetUserByVersion (string name, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<UserVersionResponse> localVarResponse = GetUserByVersionWithHttpInfo(name, version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a User By Version Retrieve an existing user by user name and version. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>ApiResponse of UserVersionResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< UserVersionResponse > GetUserByVersionWithHttpInfo (string name, long version)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetUserByVersion");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UserVersionResponse >("/users/{name}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a User By Version Retrieve an existing user by user name and version. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of UserVersionResponse</returns>
        public async System.Threading.Tasks.Task<UserVersionResponse> GetUserByVersionAsync (string name, long version)
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<UserVersionResponse> localVarResponse = await GetUserByVersionAsyncWithHttpInfo(name, version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a User By Version Retrieve an existing user by user name and version. For users linked to 3rd party providers, such as AWS or Azure, the user name must be prefixed with the provider name from configuration in the format of &lt;providername&gt;:&lt;username&gt; i.e. aws-dev:db
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="version">Versions to return</param>
        /// <returns>Task of ApiResponse (UserVersionResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<UserVersionResponse>> GetUserByVersionAsyncWithHttpInfo (string name, long version)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->GetUserByVersion");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserVersionResponse>("/users/{name}/version/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserByVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a User Restore a user by path.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <returns></returns>
        public void RestoreUser (string name)
        {
             RestoreUserWithHttpInfo(name);
        }

        /// <summary>
        /// Restore a User Restore a user by path.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse<Object> RestoreUserWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->RestoreUser");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore a User Restore a user by path.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RestoreUserAsync (string name)
        {
             await RestoreUserAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Restore a User Restore a user by path.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<Object>> RestoreUserAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->RestoreUser");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Users Search for one or more users by their name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of users to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>UserSearch</returns>
        public UserSearch SearchUsers (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<UserSearch> localVarResponse = SearchUsersWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Users Search for one or more users by their name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of users to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>ApiResponse of UserSearch</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< UserSearch > SearchUsersWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UserSearch >("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Users Search for one or more users by their name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of users to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of UserSearch</returns>
        public async System.Threading.Tasks.Task<UserSearch> SearchUsersAsync (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<UserSearch> localVarResponse = await SearchUsersAsyncWithHttpInfo(searchTerm, limit, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for Users Search for one or more users by their name.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchTerm">Search pattern for names of users to look up (optional)</param>
        /// <param name="limit">The maximum number of results per cursor (optional)</param>
        /// <param name="cursor">Cursor to next batch of results (optional)</param>
        /// <returns>Task of ApiResponse (UserSearch)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<UserSearch>> SearchUsersAsyncWithHttpInfo (string searchTerm = default(string), long? limit = default(long?), string cursor = default(string))
        {

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (searchTerm != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "searchTerm", searchTerm));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSearch>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a User Update an existing user.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>UserResponse</returns>
        public UserResponse UpdateUser (string name, UserUpdateModel body = default(UserUpdateModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<UserResponse> localVarResponse = UpdateUserWithHttpInfo(name, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a User Update an existing user.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        public DevOpsVault.SDK.Core.Client.ApiResponse< UserResponse > UpdateUserWithHttpInfo (string name, UserUpdateModel body = default(UserUpdateModel))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->UpdateUser");

            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DevOpsVault.SDK.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< UserResponse >("/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a User Update an existing user.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of UserResponse</returns>
        public async System.Threading.Tasks.Task<UserResponse> UpdateUserAsync (string name, UserUpdateModel body = default(UserUpdateModel))
        {
             DevOpsVault.SDK.Core.Client.ApiResponse<UserResponse> localVarResponse = await UpdateUserAsyncWithHttpInfo(name, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a User Update an existing user.
        /// </summary>
        /// <exception cref="DevOpsVault.SDK.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full user name to lookup user by</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        public async System.Threading.Tasks.Task<DevOpsVault.SDK.Core.Client.ApiResponse<UserResponse>> UpdateUserAsyncWithHttpInfo (string name, UserUpdateModel body = default(UserUpdateModel))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DevOpsVault.SDK.Core.Client.ApiException(400, "Missing required parameter 'name' when calling UsersApi->UpdateUser");


            DevOpsVault.SDK.Core.Client.RequestOptions localVarRequestOptions = new DevOpsVault.SDK.Core.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (name != null)
                localVarRequestOptions.PathParameters.Add("name", DevOpsVault.SDK.Core.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UserResponse>("/users/{name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
