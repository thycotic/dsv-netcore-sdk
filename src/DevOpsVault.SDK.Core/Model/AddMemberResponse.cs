/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DevOpsVault.SDK.Core.Client.OpenAPIDateConverter;

namespace DevOpsVault.SDK.Core.Model
{
    /// <summary>
    /// AddMemberResponse for Add members response
    /// </summary>
    [DataContract]
    public partial class AddMemberResponse :  IEquatable<AddMemberResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMemberResponse" /> class.
        /// </summary>
        /// <param name="addedMemberNames">addedMemberNames.</param>
        /// <param name="errors">errors.</param>
        public AddMemberResponse(List<string> addedMemberNames = default(List<string>), Dictionary<string, string> errors = default(Dictionary<string, string>))
        {
            this.AddedMemberNames = addedMemberNames;
            this.Errors = errors;
        }
        
        /// <summary>
        /// Gets or Sets AddedMemberNames
        /// </summary>
        [DataMember(Name="addedMemberNames", EmitDefaultValue=false)]
        public List<string> AddedMemberNames { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public Dictionary<string, string> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddMemberResponse {\n");
            sb.Append("  AddedMemberNames: ").Append(AddedMemberNames).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddMemberResponse);
        }

        /// <summary>
        /// Returns true if AddMemberResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AddMemberResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddMemberResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddedMemberNames == input.AddedMemberNames ||
                    this.AddedMemberNames != null &&
                    input.AddedMemberNames != null &&
                    this.AddedMemberNames.SequenceEqual(input.AddedMemberNames)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddedMemberNames != null)
                    hashCode = hashCode * 59 + this.AddedMemberNames.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
