/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DevOpsVault.SDK.Core.Client.OpenAPIDateConverter;

namespace DevOpsVault.SDK.Core.Model
{
    /// <summary>
    /// SigningRequest
    /// </summary>
    [DataContract]
    public partial class SigningRequest :  IEquatable<SigningRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SigningRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SigningRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SigningRequest" /> class.
        /// </summary>
        /// <param name="csr">Certificate Signing Request (required).</param>
        /// <param name="rootCAPath">Path to secret - registered root CA (required).</param>
        /// <param name="subjectAltNames">A list of Subject Alternative Names for a certificate (each domain must be present in the list of allowed domains).</param>
        /// <param name="ttl">TTL for a generated certificate (cannot exceed the maximum TTL specified in root CA secret).</param>
        public SigningRequest(string csr = default(string), string rootCAPath = default(string), List<string> subjectAltNames = default(List<string>), long ttl = default(long))
        {
            // to ensure "csr" is required (not null)
            this.Csr = csr ?? throw new ArgumentNullException("csr is a required property for SigningRequest and cannot be null");;
            // to ensure "rootCAPath" is required (not null)
            this.RootCAPath = rootCAPath ?? throw new ArgumentNullException("rootCAPath is a required property for SigningRequest and cannot be null");;
            this.SubjectAltNames = subjectAltNames;
            this.Ttl = ttl;
        }
        
        /// <summary>
        /// Certificate Signing Request
        /// </summary>
        /// <value>Certificate Signing Request</value>
        [DataMember(Name="csr", EmitDefaultValue=false)]
        public string Csr { get; set; }

        /// <summary>
        /// Path to secret - registered root CA
        /// </summary>
        /// <value>Path to secret - registered root CA</value>
        [DataMember(Name="rootCAPath", EmitDefaultValue=false)]
        public string RootCAPath { get; set; }

        /// <summary>
        /// A list of Subject Alternative Names for a certificate (each domain must be present in the list of allowed domains)
        /// </summary>
        /// <value>A list of Subject Alternative Names for a certificate (each domain must be present in the list of allowed domains)</value>
        [DataMember(Name="subjectAltNames", EmitDefaultValue=false)]
        public List<string> SubjectAltNames { get; set; }

        /// <summary>
        /// TTL for a generated certificate (cannot exceed the maximum TTL specified in root CA secret)
        /// </summary>
        /// <value>TTL for a generated certificate (cannot exceed the maximum TTL specified in root CA secret)</value>
        [DataMember(Name="ttl", EmitDefaultValue=false)]
        public long Ttl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SigningRequest {\n");
            sb.Append("  Csr: ").Append(Csr).Append("\n");
            sb.Append("  RootCAPath: ").Append(RootCAPath).Append("\n");
            sb.Append("  SubjectAltNames: ").Append(SubjectAltNames).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SigningRequest);
        }

        /// <summary>
        /// Returns true if SigningRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SigningRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SigningRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Csr == input.Csr ||
                    (this.Csr != null &&
                    this.Csr.Equals(input.Csr))
                ) && 
                (
                    this.RootCAPath == input.RootCAPath ||
                    (this.RootCAPath != null &&
                    this.RootCAPath.Equals(input.RootCAPath))
                ) && 
                (
                    this.SubjectAltNames == input.SubjectAltNames ||
                    this.SubjectAltNames != null &&
                    input.SubjectAltNames != null &&
                    this.SubjectAltNames.SequenceEqual(input.SubjectAltNames)
                ) && 
                (
                    this.Ttl == input.Ttl ||
                    this.Ttl.Equals(input.Ttl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Csr != null)
                    hashCode = hashCode * 59 + this.Csr.GetHashCode();
                if (this.RootCAPath != null)
                    hashCode = hashCode * 59 + this.RootCAPath.GetHashCode();
                if (this.SubjectAltNames != null)
                    hashCode = hashCode * 59 + this.SubjectAltNames.GetHashCode();
                hashCode = hashCode * 59 + this.Ttl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
