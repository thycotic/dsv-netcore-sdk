/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DevOpsVault.SDK.Core.Client.OpenAPIDateConverter;

namespace DevOpsVault.SDK.Core.Model
{
    /// <summary>
    /// RequestModel struct
    /// </summary>
    [DataContract]
    public partial class SecretUpsert :  IEquatable<SecretUpsert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecretUpsert" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecretUpsert() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecretUpsert" /> class.
        /// </summary>
        /// <param name="attributes">The user defined metadata.</param>
        /// <param name="data">The secret data (required).</param>
        /// <param name="description">The secret&#39;s description.</param>
        /// <param name="id">The autogenerated uuid.</param>
        /// <param name="overwrite">Overwrite data on update.</param>
        public SecretUpsert(Dictionary<string, Object> attributes = default(Dictionary<string, Object>), Dictionary<string, Object> data = default(Dictionary<string, Object>), string description = default(string), string id = default(string), bool overwrite = default(bool))
        {
            // to ensure "data" is required (not null)
            this.Data = data ?? throw new ArgumentNullException("data is a required property for SecretUpsert and cannot be null");;
            this.Attributes = attributes;
            this.Description = description;
            this.Id = id;
            this.Overwrite = overwrite;
        }
        
        /// <summary>
        /// The user defined metadata
        /// </summary>
        /// <value>The user defined metadata</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// The secret data
        /// </summary>
        /// <value>The secret data</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// The secret&#39;s description
        /// </summary>
        /// <value>The secret&#39;s description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The autogenerated uuid
        /// </summary>
        /// <value>The autogenerated uuid</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Overwrite data on update
        /// </summary>
        /// <value>Overwrite data on update</value>
        [DataMember(Name="overwrite", EmitDefaultValue=false)]
        public bool Overwrite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecretUpsert {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Overwrite: ").Append(Overwrite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecretUpsert);
        }

        /// <summary>
        /// Returns true if SecretUpsert instances are equal
        /// </summary>
        /// <param name="input">Instance of SecretUpsert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecretUpsert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Overwrite == input.Overwrite ||
                    this.Overwrite.Equals(input.Overwrite)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Overwrite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
