/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DevOpsVault.SDK.Core.Client.OpenAPIDateConverter;

namespace DevOpsVault.SDK.Core.Model
{
    /// <summary>
    /// UsageResponseGeneral
    /// </summary>
    [DataContract]
    public partial class UsageResponseGeneral :  IEquatable<UsageResponseGeneral>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageResponseGeneral" /> class.
        /// </summary>
        /// <param name="endDate">endDate.</param>
        /// <param name="requestsUsed">Keys are days, values are numbers of API requests made that day..</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="totalRequestsUsed">totalRequestsUsed.</param>
        /// <param name="totalSecrets">totalSecrets.</param>
        public UsageResponseGeneral(string endDate = default(string), Dictionary<string, long> requestsUsed = default(Dictionary<string, long>), string startDate = default(string), long totalRequestsUsed = default(long), long totalSecrets = default(long))
        {
            this.EndDate = endDate;
            this.RequestsUsed = requestsUsed;
            this.StartDate = startDate;
            this.TotalRequestsUsed = totalRequestsUsed;
            this.TotalSecrets = totalSecrets;
        }
        
        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// Keys are days, values are numbers of API requests made that day.
        /// </summary>
        /// <value>Keys are days, values are numbers of API requests made that day.</value>
        [DataMember(Name="requestsUsed", EmitDefaultValue=false)]
        public Dictionary<string, long> RequestsUsed { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets TotalRequestsUsed
        /// </summary>
        [DataMember(Name="totalRequestsUsed", EmitDefaultValue=false)]
        public long TotalRequestsUsed { get; set; }

        /// <summary>
        /// Gets or Sets TotalSecrets
        /// </summary>
        [DataMember(Name="totalSecrets", EmitDefaultValue=false)]
        public long TotalSecrets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsageResponseGeneral {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  RequestsUsed: ").Append(RequestsUsed).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TotalRequestsUsed: ").Append(TotalRequestsUsed).Append("\n");
            sb.Append("  TotalSecrets: ").Append(TotalSecrets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsageResponseGeneral);
        }

        /// <summary>
        /// Returns true if UsageResponseGeneral instances are equal
        /// </summary>
        /// <param name="input">Instance of UsageResponseGeneral to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsageResponseGeneral input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.RequestsUsed == input.RequestsUsed ||
                    this.RequestsUsed != null &&
                    input.RequestsUsed != null &&
                    this.RequestsUsed.SequenceEqual(input.RequestsUsed)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.TotalRequestsUsed == input.TotalRequestsUsed ||
                    this.TotalRequestsUsed.Equals(input.TotalRequestsUsed)
                ) && 
                (
                    this.TotalSecrets == input.TotalSecrets ||
                    this.TotalSecrets.Equals(input.TotalSecrets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.RequestsUsed != null)
                    hashCode = hashCode * 59 + this.RequestsUsed.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                hashCode = hashCode * 59 + this.TotalRequestsUsed.GetHashCode();
                hashCode = hashCode * 59 + this.TotalSecrets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
