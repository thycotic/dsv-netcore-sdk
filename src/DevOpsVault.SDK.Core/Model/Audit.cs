/* 
 * DevOps Vault API
 *
 * The purpose of this application is to provide a simple service for storing and getting secrets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = DevOpsVault.SDK.Core.Client.OpenAPIDateConverter;

namespace DevOpsVault.SDK.Core.Model
{
    /// <summary>
    /// Audit model
    /// </summary>
    [DataContract]
    public partial class Audit :  IEquatable<Audit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Audit" /> class.
        /// </summary>
        /// <param name="action">Action performed.</param>
        /// <param name="created">Audit created date.</param>
        /// <param name="ipaddress">IP Address logged from client.</param>
        /// <param name="message">Message additional details.</param>
        /// <param name="path">Resource path action performed on.</param>
        /// <param name="principal">Security principal that performed action.</param>
        /// <param name="principalItemId">Principal item ID.</param>
        /// <param name="tenant">Tenant ID.</param>
        /// <param name="tenantName">Tenant Name.</param>
        public Audit(string action = default(string), DateTime created = default(DateTime), string ipaddress = default(string), string message = default(string), string path = default(string), string principal = default(string), string principalItemId = default(string), string tenant = default(string), string tenantName = default(string))
        {
            this.Action = action;
            this.Created = created;
            this.Ipaddress = ipaddress;
            this.Message = message;
            this.Path = path;
            this.Principal = principal;
            this.PrincipalItemId = principalItemId;
            this.Tenant = tenant;
            this.TenantName = tenantName;
        }
        
        /// <summary>
        /// Action performed
        /// </summary>
        /// <value>Action performed</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Audit created date
        /// </summary>
        /// <value>Audit created date</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// IP Address logged from client
        /// </summary>
        /// <value>IP Address logged from client</value>
        [DataMember(Name="ipaddress", EmitDefaultValue=false)]
        public string Ipaddress { get; set; }

        /// <summary>
        /// Message additional details
        /// </summary>
        /// <value>Message additional details</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Resource path action performed on
        /// </summary>
        /// <value>Resource path action performed on</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Security principal that performed action
        /// </summary>
        /// <value>Security principal that performed action</value>
        [DataMember(Name="principal", EmitDefaultValue=false)]
        public string Principal { get; set; }

        /// <summary>
        /// Principal item ID
        /// </summary>
        /// <value>Principal item ID</value>
        [DataMember(Name="principalItemId", EmitDefaultValue=false)]
        public string PrincipalItemId { get; set; }

        /// <summary>
        /// Tenant ID
        /// </summary>
        /// <value>Tenant ID</value>
        [DataMember(Name="tenant", EmitDefaultValue=false)]
        public string Tenant { get; set; }

        /// <summary>
        /// Tenant Name
        /// </summary>
        /// <value>Tenant Name</value>
        [DataMember(Name="tenantName", EmitDefaultValue=false)]
        public string TenantName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Audit {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Ipaddress: ").Append(Ipaddress).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Principal: ").Append(Principal).Append("\n");
            sb.Append("  PrincipalItemId: ").Append(PrincipalItemId).Append("\n");
            sb.Append("  Tenant: ").Append(Tenant).Append("\n");
            sb.Append("  TenantName: ").Append(TenantName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Audit);
        }

        /// <summary>
        /// Returns true if Audit instances are equal
        /// </summary>
        /// <param name="input">Instance of Audit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Audit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Ipaddress == input.Ipaddress ||
                    (this.Ipaddress != null &&
                    this.Ipaddress.Equals(input.Ipaddress))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Principal == input.Principal ||
                    (this.Principal != null &&
                    this.Principal.Equals(input.Principal))
                ) && 
                (
                    this.PrincipalItemId == input.PrincipalItemId ||
                    (this.PrincipalItemId != null &&
                    this.PrincipalItemId.Equals(input.PrincipalItemId))
                ) && 
                (
                    this.Tenant == input.Tenant ||
                    (this.Tenant != null &&
                    this.Tenant.Equals(input.Tenant))
                ) && 
                (
                    this.TenantName == input.TenantName ||
                    (this.TenantName != null &&
                    this.TenantName.Equals(input.TenantName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Ipaddress != null)
                    hashCode = hashCode * 59 + this.Ipaddress.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Principal != null)
                    hashCode = hashCode * 59 + this.Principal.GetHashCode();
                if (this.PrincipalItemId != null)
                    hashCode = hashCode * 59 + this.PrincipalItemId.GetHashCode();
                if (this.Tenant != null)
                    hashCode = hashCode * 59 + this.Tenant.GetHashCode();
                if (this.TenantName != null)
                    hashCode = hashCode * 59 + this.TenantName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
